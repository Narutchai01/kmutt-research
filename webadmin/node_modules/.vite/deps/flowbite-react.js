import {
  FloatingFocusManager,
  FloatingList,
  GenIcon,
  HiArrowLeft,
  HiArrowRight,
  HiCalendar,
  HiChevronDown,
  HiChevronLeft,
  HiChevronRight,
  HiMoon,
  HiOutlineChevronDown,
  HiOutlineChevronLeft,
  HiOutlineChevronRight,
  HiOutlineChevronUp,
  HiStar,
  HiSun,
  HiX,
  Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
  arrow,
  autoPlacement,
  autoUpdate,
  flip,
  getTheme,
  getThemeMode,
  mergeDeep,
  offset,
  safePolygon,
  setTheme,
  setThemeMode,
  shift,
  theme,
  twMerge,
  useClick,
  useDismiss,
  useFloating,
  useFocus,
  useHover,
  useInteractions,
  useListItem,
  useListNavigation,
  useRole,
  useTypeahead
} from "./chunk-SYFD5OB6.js";
import {
  require_jsx_runtime
} from "./chunk-XUXHEDPB.js";
import "./chunk-XBHG3ID7.js";
import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __toESM
} from "./chunk-ZS7NZCD4.js";

// node_modules/flowbite-react/lib/esm/components/Accordion/Accordion.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/Accordion/AccordionContent.js
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Accordion/AccordionPanelContext.js
var import_react = __toESM(require_react());
var AccordionPanelContext = (0, import_react.createContext)(void 0);
function useAccordionContext() {
  const context = (0, import_react.useContext)(AccordionPanelContext);
  if (!context) {
    throw new Error("useAccordionContext should be used within the AccordionPanelContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Accordion/AccordionContent.js
var AccordionContent = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { isOpen } = useAccordionContext();
  const theme2 = mergeDeep(getTheme().accordion.content, customTheme);
  return (0, import_jsx_runtime.jsx)("div", { className: twMerge(theme2.base, className), "data-testid": "flowbite-accordion-content", hidden: !isOpen, ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Accordion/AccordionPanel.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var AccordionPanel = ({ children, ...props }) => {
  const { alwaysOpen } = props;
  const [isOpen, setOpen] = (0, import_react2.useState)(props.isOpen);
  const provider = alwaysOpen ? {
    ...props,
    isOpen,
    setOpen: () => setOpen(!isOpen)
  } : props;
  return (0, import_jsx_runtime2.jsx)(AccordionPanelContext.Provider, { value: provider, children });
};

// node_modules/flowbite-react/lib/esm/components/Accordion/AccordionTitle.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var AccordionTitle = ({ as: Heading = "h2", children, className, theme: customTheme = {}, ...props }) => {
  const { arrowIcon: ArrowIcon, flush, isOpen, setOpen } = useAccordionContext();
  const onClick = () => typeof setOpen !== "undefined" && setOpen();
  const theme2 = mergeDeep(getTheme().accordion.title, customTheme);
  return (0, import_jsx_runtime3.jsxs)("button", { className: twMerge(theme2.base, theme2.flush[flush ? "on" : "off"], theme2.open[isOpen ? "on" : "off"], className), onClick, type: "button", ...props, children: [(0, import_jsx_runtime3.jsx)(Heading, { className: theme2.heading, "data-testid": "flowbite-accordion-heading", children }), ArrowIcon && (0, import_jsx_runtime3.jsx)(ArrowIcon, { "aria-hidden": true, className: twMerge(theme2.arrow.base, theme2.arrow.open[isOpen ? "on" : "off"]), "data-testid": "flowbite-accordion-arrow" })] });
};

// node_modules/flowbite-react/lib/esm/components/Accordion/Accordion.js
var AccordionComponent = ({ alwaysOpen = false, arrowIcon = HiChevronDown, children, flush = false, collapseAll = false, className, theme: customTheme = {}, ...props }) => {
  const [isOpen, setOpen] = (0, import_react3.useState)(collapseAll ? -1 : 0);
  const panels = (0, import_react3.useMemo)(() => import_react3.Children.map(children, (child, i2) => (0, import_react3.cloneElement)(child, {
    alwaysOpen,
    arrowIcon,
    flush,
    isOpen: isOpen === i2,
    setOpen: () => setOpen(isOpen === i2 ? -1 : i2)
  })), [alwaysOpen, arrowIcon, children, flush, isOpen]);
  const theme2 = mergeDeep(getTheme().accordion.root, customTheme);
  return (0, import_jsx_runtime4.jsx)("div", { className: twMerge(theme2.base, theme2.flush[flush ? "on" : "off"], className), "data-testid": "flowbite-accordion", ...props, children: panels });
};
AccordionComponent.displayName = "Accordion";
AccordionPanel.displayName = "Accordion.Panel";
AccordionTitle.displayName = "Accordion.Title";
AccordionContent.displayName = "Accordion.Content";
var Accordion = Object.assign(AccordionComponent, {
  Panel: AccordionPanel,
  Title: AccordionTitle,
  Content: AccordionContent
});

// node_modules/flowbite-react/lib/esm/components/Alert/Alert.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var Alert = ({ additionalContent, children, className, color = "info", icon: Icon, onDismiss, rounded = true, theme: customTheme = {}, withBorderAccent, ...props }) => {
  const theme2 = mergeDeep(getTheme().alert, customTheme);
  return (0, import_jsx_runtime5.jsxs)("div", { className: twMerge(theme2.base, theme2.color[color], rounded && theme2.rounded, withBorderAccent && theme2.borderAccent, className), role: "alert", ...props, children: [(0, import_jsx_runtime5.jsxs)("div", { className: theme2.wrapper, "data-testid": "flowbite-alert-wrapper", children: [Icon && (0, import_jsx_runtime5.jsx)(Icon, { className: theme2.icon, "data-testid": "flowbite-alert-icon" }), (0, import_jsx_runtime5.jsx)("div", { children }), typeof onDismiss === "function" && (0, import_jsx_runtime5.jsx)("button", { "aria-label": "Dismiss", className: twMerge(theme2.closeButton.base, theme2.closeButton.color[color]), onClick: onDismiss, type: "button", children: (0, import_jsx_runtime5.jsx)(HiX, { "aria-hidden": true, className: theme2.closeButton.icon }) })] }), additionalContent && (0, import_jsx_runtime5.jsx)("div", { children: additionalContent })] });
};
Alert.displayName = "Alert";

// node_modules/flowbite-react/lib/esm/components/Avatar/Avatar.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Avatar/AvatarGroup.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var AvatarGroup = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().avatar.group, customTheme);
  return (0, import_jsx_runtime6.jsx)("div", { "data-testid": "avatar-group-element", className: twMerge(theme2.base, className), ...props, children });
};
AvatarGroup.displayName = "Avatar.Group";

// node_modules/flowbite-react/lib/esm/components/Avatar/AvatarGroupCounter.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var AvatarGroupCounter = ({ className, href, theme: customTheme = {}, total, ...props }) => {
  const theme2 = mergeDeep(getTheme().avatar.groupCounter, customTheme);
  return (0, import_jsx_runtime7.jsxs)("a", { href, className: twMerge(theme2.base, className), ...props, children: ["+", total] });
};
AvatarGroupCounter.displayName = "Avatar.GroupCounter";

// node_modules/flowbite-react/lib/esm/components/Avatar/Avatar.js
var AvatarComponent = ({ alt = "", bordered = false, children, className, color = "light", img, placeholderInitials = "", rounded = false, size = "md", stacked = false, status, statusPosition = "top-left", theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().avatar, customTheme);
  const imgClassName = twMerge(theme2.root.img.base, bordered && theme2.root.bordered, bordered && theme2.root.color[color], rounded && theme2.root.rounded, stacked && theme2.root.stacked, theme2.root.img.on, theme2.root.size[size]);
  const imgProps = {
    className: twMerge(imgClassName, theme2.root.img.on),
    "data-testid": "flowbite-avatar-img"
  };
  return (0, import_jsx_runtime8.jsxs)("div", { className: twMerge(theme2.root.base, className), "data-testid": "flowbite-avatar", ...props, children: [(0, import_jsx_runtime8.jsxs)("div", { className: "relative", children: [img ? typeof img === "string" ? (0, import_jsx_runtime8.jsx)("img", { alt, src: img, ...imgProps }) : img({ alt, ...imgProps }) : placeholderInitials ? (0, import_jsx_runtime8.jsx)("div", { className: twMerge(theme2.root.img.off, theme2.root.initials.base, stacked && theme2.root.stacked, bordered && theme2.root.bordered, bordered && theme2.root.color[color], theme2.root.size[size], rounded && theme2.root.rounded), "data-testid": "flowbite-avatar-initials-placeholder", children: (0, import_jsx_runtime8.jsx)("span", { className: twMerge(theme2.root.initials.text), "data-testid": "flowbite-avatar-initials-placeholder-text", children: placeholderInitials }) }) : (0, import_jsx_runtime8.jsx)("div", { className: twMerge(imgClassName, theme2.root.img.off), "data-testid": "flowbite-avatar-img", children: (0, import_jsx_runtime8.jsx)("svg", { className: theme2.root.img.placeholder, fill: "currentColor", viewBox: "0 0 20 20", xmlns: "http://www.w3.org/2000/svg", children: (0, import_jsx_runtime8.jsx)("path", { fillRule: "evenodd", d: "M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z", clipRule: "evenodd" }) }) }), status && (0, import_jsx_runtime8.jsx)("span", { "data-testid": "flowbite-avatar-status", className: twMerge(theme2.root.status.base, theme2.root.status[status], theme2.root.statusPosition[statusPosition]) })] }), children && (0, import_jsx_runtime8.jsx)("div", { children })] });
};
AvatarComponent.displayName = "Avatar";
var Avatar = Object.assign(AvatarComponent, {
  Group: AvatarGroup,
  Counter: AvatarGroupCounter
});

// node_modules/flowbite-react/lib/esm/components/Badge/Badge.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var Badge = ({ children, color = "info", href, icon: Icon, size = "xs", className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().badge, customTheme);
  const Content = () => (0, import_jsx_runtime9.jsxs)("span", { className: twMerge(theme2.root.base, theme2.root.color[color], theme2.root.size[size], theme2.icon[Icon ? "on" : "off"], className), "data-testid": "flowbite-badge", ...props, children: [Icon && (0, import_jsx_runtime9.jsx)(Icon, { "aria-hidden": true, className: theme2.icon.size[size], "data-testid": "flowbite-badge-icon" }), children && (0, import_jsx_runtime9.jsx)("span", { children })] });
  return href ? (0, import_jsx_runtime9.jsx)("a", { className: theme2.root.href, href, children: (0, import_jsx_runtime9.jsx)(Content, {}) }) : (0, import_jsx_runtime9.jsx)(Content, {});
};
Badge.displayName = "Badge";

// node_modules/flowbite-react/lib/esm/components/Banner/Banner.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Banner/BannerCollapseButton.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Button/Button.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/helpers/generic-forward-ref.js
var import_react4 = __toESM(require_react());
var genericForwardRef = import_react4.forwardRef;
var generic_forward_ref_default = genericForwardRef;

// node_modules/flowbite-react/lib/esm/components/Spinner/Spinner.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var Spinner = ({ className, color = "info", light, size = "md", theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().spinner, customTheme);
  return (0, import_jsx_runtime10.jsx)("span", { role: "status", ...props, children: (0, import_jsx_runtime10.jsxs)("svg", { fill: "none", viewBox: "0 0 100 101", className: twMerge(theme2.base, theme2.color[color], theme2.light[light ? "on" : "off"].base, theme2.light[light ? "on" : "off"].color[color], theme2.size[size], className), children: [(0, import_jsx_runtime10.jsx)("path", { d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z", fill: "currentColor" }), (0, import_jsx_runtime10.jsx)("path", { d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z", fill: "currentFill" })] }) });
};
Spinner.displayName = "Spinner";

// node_modules/flowbite-react/lib/esm/components/Button/ButtonBase.js
var import_react5 = __toESM(require_react());
var ButtonBaseComponent = ({ children, as: Component, href, type = "button", ...props }, ref) => {
  const BaseComponent = Component || (href ? "a" : "button");
  return (0, import_react5.createElement)(BaseComponent, { ref, href, type, ...props }, children);
};
var ButtonBase = generic_forward_ref_default(ButtonBaseComponent);

// node_modules/flowbite-react/lib/esm/components/Button/ButtonGroup.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_react6 = __toESM(require_react());
var ButtonGroup = ({ children, className, outline, pill, theme: customTheme = {}, ...props }) => {
  const items = (0, import_react6.useMemo)(() => import_react6.Children.map(children, (child, index) => (0, import_react6.cloneElement)(child, {
    outline,
    pill,
    positionInGroup: index === 0 ? "start" : index === children.length - 1 ? "end" : "middle"
  })), [children, outline, pill]);
  const theme2 = mergeDeep(getTheme().buttonGroup, customTheme);
  return (0, import_jsx_runtime11.jsx)("div", { className: twMerge(theme2.base, className), role: "group", ...props, children: items });
};
ButtonGroup.displayName = "Button.Group";

// node_modules/flowbite-react/lib/esm/components/Button/Button.js
var ButtonComponentFn = ({ children, className, color = "info", disabled, fullSized, isProcessing = false, processingLabel = "Loading...", processingSpinner, gradientDuoTone, gradientMonochrome, label, outline = false, pill = false, positionInGroup = "none", size = "md", theme: customTheme = {}, ...props }, ref) => {
  const { buttonGroup: groupTheme, button: buttonTheme } = getTheme();
  const theme2 = mergeDeep(buttonTheme, customTheme);
  const theirProps = props;
  return (0, import_jsx_runtime12.jsx)(ButtonBase, { ref, disabled, className: twMerge(theme2.base, disabled && theme2.disabled, !gradientDuoTone && !gradientMonochrome && theme2.color[color], gradientDuoTone && !gradientMonochrome && theme2.gradientDuoTone[gradientDuoTone], !gradientDuoTone && gradientMonochrome && theme2.gradient[gradientMonochrome], outline && (theme2.outline.color[color] ?? theme2.outline.color.default), theme2.pill[pill ? "on" : "off"], fullSized && theme2.fullSized, groupTheme.position[positionInGroup], className), ...theirProps, children: (0, import_jsx_runtime12.jsx)("span", { className: twMerge(theme2.inner.base, theme2.outline[outline ? "on" : "off"], theme2.outline.pill[outline && pill ? "on" : "off"], theme2.size[size], outline && !theme2.outline.color[color] && theme2.inner.outline, isProcessing && theme2.isProcessing, isProcessing && theme2.inner.isProcessingPadding[size], theme2.inner.position[positionInGroup]), children: (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [isProcessing && (0, import_jsx_runtime12.jsx)("span", { className: twMerge(theme2.spinnerSlot, theme2.spinnerLeftPosition[size]), children: processingSpinner || (0, import_jsx_runtime12.jsx)(Spinner, { size }) }), typeof children !== "undefined" ? children : (0, import_jsx_runtime12.jsx)("span", { "data-testid": "flowbite-button-label", className: twMerge(theme2.label), children: isProcessing ? processingLabel : label })] }) }) });
};
ButtonComponentFn.displayName = "Button";
var ButtonComponent = generic_forward_ref_default(ButtonComponentFn);
var Button = Object.assign(ButtonComponent, {
  Group: ButtonGroup
});

// node_modules/flowbite-react/lib/esm/components/Banner/BannerCollapseButton.js
var BannerCollapseButton = ({ children, ...props }) => {
  const onClick = (event) => {
    const collapseButton = event.target;
    const parentBanner = collapseButton.closest('[role="banner"]');
    parentBanner == null ? void 0 : parentBanner.remove();
  };
  return (0, import_jsx_runtime13.jsx)(Button, { onClick, ...props, children });
};
BannerCollapseButton.displayName = "Banner.CollapseButton";

// node_modules/flowbite-react/lib/esm/components/Banner/Banner.js
var BannerComponent = ({ children, ...props }) => {
  return (0, import_jsx_runtime14.jsx)("div", { "data-testid": "flowbite-banner", role: "banner", tabIndex: -1, ...props, children });
};
BannerComponent.displayName = "Banner";
var Banner = Object.assign(BannerComponent, {
  CollapseButton: BannerCollapseButton
});

// node_modules/flowbite-react/lib/esm/components/Blockquote/Blockquote.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var Blockquote = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().blockquote, customTheme);
  return (0, import_jsx_runtime15.jsx)("blockquote", { className: twMerge(theme2.root.base, className), "data-testid": "flowbite-blockquote", ...props, children });
};
Blockquote.displayName = "Blockquote";

// node_modules/flowbite-react/lib/esm/components/Breadcrumb/Breadcrumb.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Breadcrumb/BreadcrumbItem.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var import_react7 = __toESM(require_react());
var BreadcrumbItem = (0, import_react7.forwardRef)(({ children, className, href, icon: Icon, theme: customTheme = {}, ...props }, ref) => {
  const isLink = typeof href !== "undefined";
  const Component = isLink ? "a" : "span";
  const theme2 = mergeDeep(getTheme().breadcrumb.item, customTheme);
  return (0, import_jsx_runtime16.jsxs)("li", { className: twMerge(theme2.base, className), ...props, children: [(0, import_jsx_runtime16.jsx)(HiOutlineChevronRight, { "aria-hidden": true, className: theme2.chevron, "data-testid": "flowbite-breadcrumb-separator" }), (0, import_jsx_runtime16.jsxs)(Component, { ref, className: theme2.href[isLink ? "on" : "off"], "data-testid": "flowbite-breadcrumb-item", href, children: [Icon && (0, import_jsx_runtime16.jsx)(Icon, { "aria-hidden": true, className: theme2.icon }), children] })] });
});
BreadcrumbItem.displayName = "Breadcrumb.Item";

// node_modules/flowbite-react/lib/esm/components/Breadcrumb/Breadcrumb.js
var BreadcrumbComponent = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().breadcrumb.root, customTheme);
  return (0, import_jsx_runtime17.jsx)("nav", { "aria-label": "Breadcrumb", className: twMerge(theme2.base, className), ...props, children: (0, import_jsx_runtime17.jsx)("ol", { className: theme2.list, children }) });
};
BreadcrumbComponent.displayName = "Breadcrumb";
var Breadcrumb = Object.assign(BreadcrumbComponent, {
  Item: BreadcrumbItem
});

// node_modules/flowbite-react/lib/esm/components/Card/Card.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/helpers/omit.js
var omit = (keys) => (obj) => {
  const result = {};
  for (const key in obj) {
    if (keys.includes(key)) {
      continue;
    }
    result[key] = obj[key];
  }
  return result;
};

// node_modules/flowbite-react/lib/esm/components/Card/Card.js
var Card = (props) => {
  const { children, className, horizontal, href, theme: customTheme = {} } = props;
  const Component = typeof href === "undefined" ? "div" : "a";
  const theirProps = removeCustomProps(props);
  const theme2 = mergeDeep(getTheme().card, customTheme);
  return (0, import_jsx_runtime18.jsxs)(Component, { "data-testid": "flowbite-card", href, className: twMerge(theme2.root.base, theme2.root.horizontal[horizontal ? "on" : "off"], href && theme2.root.href, className), ...theirProps, children: [(0, import_jsx_runtime18.jsx)(Image, { ...props }), (0, import_jsx_runtime18.jsx)("div", { className: theme2.root.children, children })] });
};
var Image = ({ theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().card, customTheme);
  if (props.renderImage) {
    return props.renderImage(theme2, props.horizontal ?? false);
  }
  if (props.imgSrc) {
    return (0, import_jsx_runtime18.jsx)("img", { "data-testid": "flowbite-card-image", alt: props.imgAlt ?? "", src: props.imgSrc, className: twMerge(theme2.img.base, theme2.img.horizontal[props.horizontal ? "on" : "off"]) });
  }
  return null;
};
var removeCustomProps = omit([
  "renderImage",
  "imgSrc",
  "imgAlt",
  "children",
  "className",
  "horizontal",
  "href",
  "theme"
]);

// node_modules/flowbite-react/lib/esm/components/Carousel/Carousel.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_react9 = __toESM(require_react());

// node_modules/react-indiana-drag-scroll/dist/index.es.js
var import_react8 = __toESM(require_react());
var n = function(t2, e2) {
  return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
    t3.__proto__ = e3;
  } || function(t3, e3) {
    for (var n2 in e3)
      e3.hasOwnProperty(n2) && (t3[n2] = e3[n2]);
  })(t2, e2);
};
var o;
var r;
var i = (function(t2) {
  !function() {
    var e2 = {}.hasOwnProperty;
    function n2() {
      for (var t3 = [], o2 = 0; o2 < arguments.length; o2++) {
        var r2 = arguments[o2];
        if (r2) {
          var i2 = typeof r2;
          if ("string" === i2 || "number" === i2)
            t3.push(r2);
          else if (Array.isArray(r2) && r2.length) {
            var s2 = n2.apply(null, r2);
            s2 && t3.push(s2);
          } else if ("object" === i2)
            for (var l2 in r2)
              e2.call(r2, l2) && r2[l2] && t3.push(l2);
        }
      }
      return t3.join(" ");
    }
    t2.exports ? (n2.default = n2, t2.exports = n2) : window.classNames = n2;
  }();
}(r = { path: o, exports: {}, require: function(t2, e2) {
  return function() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }(null == e2 && r.path);
} }, r.exports), r.exports);
function s(t2, e2, n2) {
  var o2, r2, i2, s2, l2;
  function a2() {
    var c3 = Date.now() - s2;
    c3 < e2 && c3 >= 0 ? o2 = setTimeout(a2, e2 - c3) : (o2 = null, n2 || (l2 = t2.apply(i2, r2), i2 = r2 = null));
  }
  null == e2 && (e2 = 100);
  var c2 = function() {
    i2 = this, r2 = arguments, s2 = Date.now();
    var c3 = n2 && !o2;
    return o2 || (o2 = setTimeout(a2, e2)), c3 && (l2 = t2.apply(i2, r2), i2 = r2 = null), l2;
  };
  return c2.clear = function() {
    o2 && (clearTimeout(o2), o2 = null);
  }, c2.flush = function() {
    o2 && (l2 = t2.apply(i2, r2), i2 = r2 = null, clearTimeout(o2), o2 = null);
  }, c2;
}
s.debounce = s;
var l = s;
!function(t2, e2) {
  void 0 === e2 && (e2 = {});
  var n2 = e2.insertAt;
  if (t2 && "undefined" != typeof document) {
    var o2 = document.head || document.getElementsByTagName("head")[0], r2 = document.createElement("style");
    r2.type = "text/css", "top" === n2 && o2.firstChild ? o2.insertBefore(r2, o2.firstChild) : o2.appendChild(r2), r2.styleSheet ? r2.styleSheet.cssText = t2 : r2.appendChild(document.createTextNode(t2));
  }
}(".indiana-scroll-container {\n  overflow: auto; }\n  .indiana-scroll-container--dragging {\n    scroll-behavior: auto !important; }\n    .indiana-scroll-container--dragging > * {\n      pointer-events: none;\n      cursor: -webkit-grab;\n      cursor: grab; }\n  .indiana-scroll-container--hide-scrollbars {\n    overflow: hidden;\n    overflow: -moz-scrollbars-none;\n    -ms-overflow-style: none;\n    scrollbar-width: none; }\n    .indiana-scroll-container--hide-scrollbars::-webkit-scrollbar {\n      display: none !important;\n      height: 0 !important;\n      width: 0 !important;\n      background: transparent !important;\n      -webkit-appearance: none !important; }\n  .indiana-scroll-container--native-scroll {\n    overflow: auto; }\n\n.indiana-dragging {\n  cursor: -webkit-grab;\n  cursor: grab; }\n");
var a;
var c = (a = "indiana-scroll-container", function(t2, e2) {
  if (!t2)
    return a;
  var n2;
  "string" == typeof t2 ? n2 = t2 : e2 = t2;
  var o2 = a;
  return n2 && (o2 += "__" + n2), o2 + (e2 ? Object.keys(e2).reduce(function(t3, n3) {
    var r2 = e2[n3];
    return r2 && (t3 += " " + ("boolean" == typeof r2 ? o2 + "--" + n3 : o2 + "--" + n3 + "_" + r2)), t3;
  }, "") : "");
});
var p = function(e2) {
  function o2(n2) {
    var o3 = e2.call(this, n2) || this;
    return o3.onEndScroll = function() {
      o3.scrolling = false, !o3.pressed && o3.started && o3.processEnd();
    }, o3.onScroll = function(t2) {
      var e3 = o3.container.current;
      e3.scrollLeft === o3.scrollLeft && e3.scrollTop === o3.scrollTop || (o3.scrolling = true, o3.processScroll(t2), o3.onEndScroll());
    }, o3.onTouchStart = function(t2) {
      var e3 = o3.props.nativeMobileScroll;
      if (o3.isDraggable(t2.target))
        if (o3.internal = true, e3 && o3.scrolling)
          o3.pressed = true;
        else {
          var n3 = t2.touches[0];
          o3.processClick(t2, n3.clientX, n3.clientY), !e3 && o3.props.stopPropagation && t2.stopPropagation();
        }
    }, o3.onTouchEnd = function(t2) {
      var e3 = o3.props.nativeMobileScroll;
      o3.pressed && (!o3.started || o3.scrolling && e3 ? o3.pressed = false : o3.processEnd(), o3.forceUpdate());
    }, o3.onTouchMove = function(t2) {
      var e3 = o3.props.nativeMobileScroll;
      if (o3.pressed && (!e3 || !o3.isMobile)) {
        var n3 = t2.touches[0];
        n3 && o3.processMove(t2, n3.clientX, n3.clientY), t2.preventDefault(), o3.props.stopPropagation && t2.stopPropagation();
      }
    }, o3.onMouseDown = function(t2) {
      o3.isDraggable(t2.target) && o3.isScrollable() && (o3.internal = true, -1 !== o3.props.buttons.indexOf(t2.button) && (o3.processClick(t2, t2.clientX, t2.clientY), t2.preventDefault(), o3.props.stopPropagation && t2.stopPropagation()));
    }, o3.onMouseMove = function(t2) {
      o3.pressed && (o3.processMove(t2, t2.clientX, t2.clientY), t2.preventDefault(), o3.props.stopPropagation && t2.stopPropagation());
    }, o3.onMouseUp = function(t2) {
      o3.pressed && (o3.started ? o3.processEnd() : (o3.internal = false, o3.pressed = false, o3.forceUpdate(), o3.props.onClick && o3.props.onClick(t2)), t2.preventDefault(), o3.props.stopPropagation && t2.stopPropagation());
    }, o3.container = import_react8.default.createRef(), o3.onEndScroll = l(o3.onEndScroll, 300), o3.scrolling = false, o3.started = false, o3.pressed = false, o3.internal = false, o3.getRef = o3.getRef.bind(o3), o3;
  }
  return function(t2, e3) {
    function o3() {
      this.constructor = t2;
    }
    n(t2, e3), t2.prototype = null === e3 ? Object.create(e3) : (o3.prototype = e3.prototype, new o3());
  }(o2, e2), o2.prototype.componentDidMount = function() {
    var t2 = this.props.nativeMobileScroll, e3 = this.container.current;
    window.addEventListener("mouseup", this.onMouseUp), window.addEventListener("mousemove", this.onMouseMove), window.addEventListener("touchmove", this.onTouchMove, { passive: false }), window.addEventListener("touchend", this.onTouchEnd), e3.addEventListener("touchstart", this.onTouchStart, { passive: false }), e3.addEventListener("mousedown", this.onMouseDown, { passive: false }), t2 && (this.isMobile = this.isMobileDevice(), this.isMobile && this.forceUpdate());
  }, o2.prototype.componentWillUnmount = function() {
    window.removeEventListener("mouseup", this.onMouseUp), window.removeEventListener("mousemove", this.onMouseMove), window.removeEventListener("touchmove", this.onTouchMove), window.removeEventListener("touchend", this.onTouchEnd);
  }, o2.prototype.getElement = function() {
    return this.container.current;
  }, o2.prototype.isMobileDevice = function() {
    return void 0 !== window.orientation || -1 !== navigator.userAgent.indexOf("IEMobile");
  }, o2.prototype.isDraggable = function(t2) {
    var e3 = this.props.ignoreElements;
    if (e3) {
      var n2 = t2.closest(e3);
      return null === n2 || n2.contains(this.getElement());
    }
    return true;
  }, o2.prototype.isScrollable = function() {
    var t2 = this.container.current;
    return t2 && (t2.scrollWidth > t2.clientWidth || t2.scrollHeight > t2.clientHeight);
  }, o2.prototype.processClick = function(t2, e3, n2) {
    var o3 = this.container.current;
    this.scrollLeft = o3.scrollLeft, this.scrollTop = o3.scrollTop, this.clientX = e3, this.clientY = n2, this.pressed = true;
  }, o2.prototype.processStart = function(t2) {
    void 0 === t2 && (t2 = true);
    var e3 = this.props.onStartScroll;
    this.started = true, t2 && document.body.classList.add("indiana-dragging"), e3 && e3({ external: !this.internal }), this.forceUpdate();
  }, o2.prototype.processScroll = function(t2) {
    if (this.started) {
      var e3 = this.props.onScroll;
      e3 && e3({ external: !this.internal });
    } else
      this.processStart(false);
  }, o2.prototype.processMove = function(t2, e3, n2) {
    var o3 = this.props, r2 = o3.horizontal, i2 = o3.vertical, s2 = o3.activationDistance, l2 = o3.onScroll, a2 = this.container.current;
    this.started ? (r2 && (a2.scrollLeft -= e3 - this.clientX), i2 && (a2.scrollTop -= n2 - this.clientY), l2 && l2({ external: !this.internal }), this.clientX = e3, this.clientY = n2, this.scrollLeft = a2.scrollLeft, this.scrollTop = a2.scrollTop) : (r2 && Math.abs(e3 - this.clientX) > s2 || i2 && Math.abs(n2 - this.clientY) > s2) && (this.clientX = e3, this.clientY = n2, this.processStart());
  }, o2.prototype.processEnd = function() {
    var t2 = this.props.onEndScroll;
    this.container.current && t2 && t2({ external: !this.internal }), this.pressed = false, this.started = false, this.scrolling = false, this.internal = false, document.body.classList.remove("indiana-dragging"), this.forceUpdate();
  }, o2.prototype.getRef = function(t2) {
    [this.container, this.props.innerRef].forEach(function(e3) {
      e3 && ("function" == typeof e3 ? e3(t2) : e3.current = t2);
    });
  }, o2.prototype.render = function() {
    var e3 = this.props, n2 = e3.children, o3 = e3.draggingClassName, r2 = e3.className, s2 = e3.style, l2 = e3.hideScrollbars, a2 = e3.component;
    return import_react8.default.createElement(a2, { className: i(r2, this.pressed && o3, c({ dragging: this.pressed, "hide-scrollbars": l2, "native-scroll": this.isMobile })), style: s2, ref: this.getRef, onScroll: this.onScroll }, n2);
  }, o2.defaultProps = { nativeMobileScroll: true, hideScrollbars: true, activationDistance: 10, vertical: true, horizontal: true, stopPropagation: false, style: {}, component: "div", buttons: [0] }, o2;
}(import_react8.PureComponent);
var index_es_default = p;

// node_modules/flowbite-react/lib/esm/helpers/is-client.js
var isClient = () => {
  return typeof window !== "undefined";
};

// node_modules/flowbite-react/lib/esm/components/Carousel/Carousel.js
var Carousel = ({ children, indicators = true, leftControl, rightControl, slide = true, draggable = true, slideInterval, className, theme: customTheme = {}, onSlideChange = null, pauseOnHover = false, ...props }) => {
  const theme2 = mergeDeep(getTheme().carousel, customTheme);
  const isDeviceMobile = isClient() && navigator.userAgent.indexOf("IEMobile") !== -1;
  const carouselContainer = (0, import_react9.useRef)(null);
  const [activeItem, setActiveItem] = (0, import_react9.useState)(0);
  const [isDragging, setIsDragging] = (0, import_react9.useState)(false);
  const [isHovering, setIsHovering] = (0, import_react9.useState)(false);
  const didMountRef = (0, import_react9.useRef)(false);
  const items = (0, import_react9.useMemo)(() => import_react9.Children.map(children, (child) => (0, import_react9.cloneElement)(child, {
    className: twMerge(theme2.item.base, child.props.className)
  })), [children, theme2.item.base]);
  const navigateTo = (0, import_react9.useCallback)((item) => () => {
    if (!items)
      return;
    item = (item + items.length) % items.length;
    if (carouselContainer.current) {
      carouselContainer.current.scrollLeft = carouselContainer.current.clientWidth * item;
    }
    setActiveItem(item);
  }, [items]);
  (0, import_react9.useEffect)(() => {
    if (carouselContainer.current && !isDragging && carouselContainer.current.scrollLeft !== 0) {
      setActiveItem(Math.round(carouselContainer.current.scrollLeft / carouselContainer.current.clientWidth));
    }
  }, [isDragging]);
  (0, import_react9.useEffect)(() => {
    if (slide && !(pauseOnHover && isHovering)) {
      const intervalId = setInterval(() => !isDragging && navigateTo(activeItem + 1)(), slideInterval ?? 3e3);
      return () => clearInterval(intervalId);
    }
  }, [activeItem, isDragging, navigateTo, slide, slideInterval, pauseOnHover, isHovering]);
  (0, import_react9.useEffect)(() => {
    if (didMountRef.current) {
      onSlideChange && onSlideChange(activeItem);
    } else {
      didMountRef.current = true;
    }
  }, [onSlideChange, activeItem]);
  const handleDragging = (dragging) => () => setIsDragging(dragging);
  const setHoveringTrue = (0, import_react9.useCallback)(() => setIsHovering(true), [setIsHovering]);
  const setHoveringFalse = (0, import_react9.useCallback)(() => setIsHovering(false), [setIsHovering]);
  return (0, import_jsx_runtime19.jsxs)("div", { className: twMerge(theme2.root.base, className), "data-testid": "carousel", onMouseEnter: setHoveringTrue, onMouseLeave: setHoveringFalse, onTouchStart: setHoveringTrue, onTouchEnd: setHoveringFalse, ...props, children: [(0, import_jsx_runtime19.jsx)(index_es_default, { className: twMerge(theme2.scrollContainer.base, (isDeviceMobile || !isDragging) && theme2.scrollContainer.snap), draggingClassName: "cursor-grab", innerRef: carouselContainer, onEndScroll: handleDragging(false), onStartScroll: handleDragging(draggable), vertical: false, horizontal: draggable, children: items == null ? void 0 : items.map((item, index) => (0, import_jsx_runtime19.jsx)("div", { className: theme2.item.wrapper[draggable ? "on" : "off"], "data-active": activeItem === index, "data-testid": "carousel-item", children: item }, index)) }), indicators && (0, import_jsx_runtime19.jsx)("div", { className: theme2.indicators.wrapper, children: items == null ? void 0 : items.map((_, index) => (0, import_jsx_runtime19.jsx)("button", { className: twMerge(theme2.indicators.base, theme2.indicators.active[index === activeItem ? "on" : "off"]), onClick: navigateTo(index), "data-testid": "carousel-indicator", "aria-label": `Slide ${index + 1}` }, index)) }), items && (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [(0, import_jsx_runtime19.jsx)("div", { className: theme2.root.leftControl, children: (0, import_jsx_runtime19.jsx)("button", { className: "group", "data-testid": "carousel-left-control", onClick: navigateTo(activeItem - 1), type: "button", "aria-label": "Previous slide", children: leftControl ? leftControl : (0, import_jsx_runtime19.jsx)(DefaultLeftControl, { theme: customTheme }) }) }), (0, import_jsx_runtime19.jsx)("div", { className: theme2.root.rightControl, children: (0, import_jsx_runtime19.jsx)("button", { className: "group", "data-testid": "carousel-right-control", onClick: navigateTo(activeItem + 1), type: "button", "aria-label": "Next slide", children: rightControl ? rightControl : (0, import_jsx_runtime19.jsx)(DefaultRightControl, { theme: customTheme }) }) })] })] });
};
var DefaultLeftControl = ({ theme: customTheme = {} }) => {
  const theme2 = mergeDeep(getTheme().carousel, customTheme);
  return (0, import_jsx_runtime19.jsx)("span", { className: theme2.control.base, children: (0, import_jsx_runtime19.jsx)(HiOutlineChevronLeft, { className: theme2.control.icon }) });
};
var DefaultRightControl = ({ theme: customTheme = {} }) => {
  const theme2 = mergeDeep(getTheme().carousel, customTheme);
  return (0, import_jsx_runtime19.jsx)("span", { className: theme2.control.base, children: (0, import_jsx_runtime19.jsx)(HiOutlineChevronRight, { className: theme2.control.icon }) });
};
Carousel.displayName = "Carousel";

// node_modules/flowbite-react/lib/esm/components/Checkbox/Checkbox.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_react10 = __toESM(require_react());
var Checkbox = (0, import_react10.forwardRef)(({ className, color = "default", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().checkbox, customTheme);
  return (0, import_jsx_runtime20.jsx)("input", { ref, type: "checkbox", className: twMerge(theme2.root.base, theme2.root.color[color], className), ...props });
});
Checkbox.displayName = "Checkbox";

// node_modules/flowbite-react/lib/esm/components/DarkThemeToggle/DarkThemeToggle.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/hooks/use-is-mounted.js
var import_react11 = __toESM(require_react());
function useIsMounted() {
  const [mounted, setMounted] = (0, import_react11.useState)(false);
  (0, import_react11.useEffect)(() => setMounted(true), []);
  return mounted;
}

// node_modules/flowbite-react/lib/esm/hooks/use-theme-mode.js
var import_react13 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/hooks/use-watch-localstorage-value.js
var import_react12 = __toESM(require_react());
var useWatchLocalStorageValue = ({ key: watchKey, onChange }) => {
  function handleStorageChange({ key, newValue }) {
    if (key === watchKey)
      onChange(newValue);
  }
  (0, import_react12.useEffect)(() => {
    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, []);
};

// node_modules/flowbite-react/lib/esm/hooks/use-theme-mode.js
var DEFAULT_MODE = "light";
var LS_THEME_MODE = "flowbite-theme-mode";
var SYNC_THEME_MODE = "flowbite-theme-mode-sync";
var useThemeMode = () => {
  const [mode, setMode] = (0, import_react13.useState)(getInitialMode(getThemeMode()));
  (0, import_react13.useEffect)(() => {
    setModeInLS(mode);
    setModeInDOM(mode);
  }, []);
  useWatchLocalStorageValue({
    key: LS_THEME_MODE,
    onChange(newValue) {
      if (newValue)
        return handleSetMode(newValue);
    }
  });
  useSyncMode((mode2) => setMode(mode2));
  const handleSetMode = (mode2) => {
    setMode(mode2);
    setModeInLS(mode2);
    setModeInDOM(mode2);
    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, { detail: mode2 }));
  };
  const toggleMode = () => {
    let newMode = mode;
    if (newMode === "auto")
      newMode = computeModeValue(newMode);
    newMode = newMode === "dark" ? "light" : "dark";
    handleSetMode(newMode);
  };
  const clearMode = () => {
    const newMode = getThemeMode() ?? DEFAULT_MODE;
    handleSetMode(newMode);
  };
  return { mode, computedMode: computeModeValue(mode), setMode: handleSetMode, toggleMode, clearMode };
};
var useSyncMode = (onChange) => {
  (0, import_react13.useEffect)(() => {
    function handleSync(e2) {
      const mode = e2.detail;
      onChange(mode);
    }
    document.addEventListener(SYNC_THEME_MODE, handleSync);
    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);
  }, []);
};
var setModeInLS = (mode) => localStorage.setItem(LS_THEME_MODE, mode);
var setModeInDOM = (mode) => {
  const computedMode = computeModeValue(mode);
  if (computedMode === "dark") {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
};
var getInitialMode = (defaultMode) => {
  if (!isClient())
    return DEFAULT_MODE;
  const LSMode = localStorage.getItem(LS_THEME_MODE);
  return LSMode ?? defaultMode ?? DEFAULT_MODE;
};
var computeModeValue = (mode) => {
  return mode === "auto" ? prefersColorScheme() : mode;
};
var prefersColorScheme = () => {
  var _a;
  return ((_a = window.matchMedia) == null ? void 0 : _a.call(window, "(prefers-color-scheme: dark)").matches) ? "dark" : "light";
};

// node_modules/flowbite-react/lib/esm/components/DarkThemeToggle/DarkThemeToggle.js
var DarkThemeToggle = ({ className, theme: customTheme = {}, iconDark: IconDark = HiSun, iconLight: IconLight = HiMoon, ...props }) => {
  const isMounted = useIsMounted();
  const { computedMode, toggleMode } = useThemeMode();
  const theme2 = mergeDeep(getTheme().darkThemeToggle, customTheme);
  return (0, import_jsx_runtime21.jsxs)("button", { type: "button", "aria-label": "Toggle dark mode", "data-testid": "dark-theme-toggle", className: twMerge(theme2.root.base, className), onClick: toggleMode, ...props, children: [(0, import_jsx_runtime21.jsx)(IconDark, { "aria-label": "Currently dark mode", "data-active": isMounted && computedMode === "dark", className: twMerge(theme2.root.icon, "hidden dark:block") }), (0, import_jsx_runtime21.jsx)(IconLight, { "aria-label": "Currently light mode", "data-active": isMounted && computedMode === "light", className: twMerge(theme2.root.icon, "dark:hidden") })] });
};
DarkThemeToggle.displayName = "DarkThemeToggle";

// node_modules/flowbite-react/lib/esm/components/Datepicker/Datepicker.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/TextInput/TextInput.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var import_react14 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/HelperText/HelperText.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var HelperText = ({ children, className, color = "default", theme: customTheme = {}, value, ...props }) => {
  const theme2 = mergeDeep(getTheme().helperText, customTheme);
  return (0, import_jsx_runtime22.jsx)("p", { className: twMerge(theme2.root.base, theme2.root.colors[color], className), ...props, children: value ?? children ?? "" });
};
HelperText.displayName = "HelperText";

// node_modules/flowbite-react/lib/esm/components/TextInput/TextInput.js
var TextInput = (0, import_react14.forwardRef)(({ addon, className, color = "gray", helperText, icon: Icon, rightIcon: RightIcon, shadow, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().textInput, customTheme);
  return (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [(0, import_jsx_runtime23.jsxs)("div", { className: twMerge(theme2.base, className), children: [addon && (0, import_jsx_runtime23.jsx)("span", { className: theme2.addon, children: addon }), (0, import_jsx_runtime23.jsxs)("div", { className: theme2.field.base, children: [Icon && (0, import_jsx_runtime23.jsx)("div", { className: theme2.field.icon.base, children: (0, import_jsx_runtime23.jsx)(Icon, { className: theme2.field.icon.svg }) }), RightIcon && (0, import_jsx_runtime23.jsx)("div", { "data-testid": "right-icon", className: theme2.field.rightIcon.base, children: (0, import_jsx_runtime23.jsx)(RightIcon, { className: theme2.field.rightIcon.svg }) }), (0, import_jsx_runtime23.jsx)("input", { className: twMerge(theme2.field.input.base, theme2.field.input.colors[color], theme2.field.input.sizes[sizing], theme2.field.input.withIcon[Icon ? "on" : "off"], theme2.field.input.withRightIcon[RightIcon ? "on" : "off"], theme2.field.input.withAddon[addon ? "on" : "off"], theme2.field.input.withShadow[shadow ? "on" : "off"]), ...props, ref })] })] }), helperText && (0, import_jsx_runtime23.jsx)(HelperText, { color, children: helperText })] });
});
TextInput.displayName = "TextInput";

// node_modules/flowbite-react/lib/esm/components/Datepicker/DatepickerContext.js
var import_react15 = __toESM(require_react());
var DatepickerContext = (0, import_react15.createContext)(void 0);
function useDatePickerContext() {
  const context = (0, import_react15.useContext)(DatepickerContext);
  if (!context) {
    throw new Error("useDatePickerContext should be used within the DatePickerContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Datepicker/Views/Days.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Datepicker/helpers.js
var Views;
(function(Views2) {
  Views2[Views2["Days"] = 0] = "Days";
  Views2[Views2["Months"] = 1] = "Months";
  Views2[Views2["Years"] = 2] = "Years";
  Views2[Views2["Decades"] = 3] = "Decades";
})(Views || (Views = {}));
var WeekStart;
(function(WeekStart2) {
  WeekStart2[WeekStart2["Sunday"] = 0] = "Sunday";
  WeekStart2[WeekStart2["Monday"] = 1] = "Monday";
  WeekStart2[WeekStart2["Tuesday"] = 2] = "Tuesday";
  WeekStart2[WeekStart2["Wednesday"] = 3] = "Wednesday";
  WeekStart2[WeekStart2["Thursday"] = 4] = "Thursday";
  WeekStart2[WeekStart2["Friday"] = 5] = "Friday";
  WeekStart2[WeekStart2["Saturday"] = 6] = "Saturday";
})(WeekStart || (WeekStart = {}));
var isDateInRange = (date, minDate, maxDate) => {
  const dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();
  if (minDate && maxDate) {
    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();
    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();
    return dateTime >= minDateTime && dateTime <= maxDateTime;
  }
  if (minDate) {
    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();
    return dateTime >= minDateTime;
  }
  if (maxDate) {
    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();
    return dateTime <= maxDateTime;
  }
  return true;
};
var isDateEqual = (date, selectedDate) => {
  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
  return date.getTime() === selectedDate.getTime();
};
var getFirstDateInRange = (date, minDate, maxDate) => {
  if (!isDateInRange(date, minDate, maxDate)) {
    if (minDate && date < minDate) {
      date = minDate;
    } else if (maxDate && date > maxDate) {
      date = maxDate;
    }
  }
  return date;
};
var getFirstDayOfTheMonth = (date, weekStart) => {
  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
  const dayOfWeek = firstDayOfMonth.getDay();
  let diff = dayOfWeek - weekStart;
  if (diff < 0) {
    diff += 7;
  }
  return addDays(firstDayOfMonth, -diff);
};
var getWeekDays = (lang, weekStart) => {
  const weekdays = [];
  const date = /* @__PURE__ */ new Date(0);
  date.setDate(date.getDate() - date.getDay() + weekStart);
  const formatter = new Intl.DateTimeFormat(lang, { weekday: "short" });
  for (let i2 = 0; i2 < 7; i2++) {
    weekdays.push(formatter.format(addDays(date, i2)));
  }
  return weekdays;
};
var addDays = (date, amount) => {
  const newDate = new Date(date);
  newDate.setDate(newDate.getDate() + amount);
  return newDate;
};
var addMonths = (date, amount) => {
  const newDate = new Date(date);
  newDate.setMonth(newDate.getMonth() + amount);
  return newDate;
};
var addYears = (date, amount) => {
  const newDate = new Date(date);
  newDate.setFullYear(newDate.getFullYear() + amount);
  return newDate;
};
var getFormattedDate = (language, date, options) => {
  let defaultOptions = {
    day: "numeric",
    month: "long",
    year: "numeric"
  };
  if (options) {
    defaultOptions = options;
  }
  return new Intl.DateTimeFormat(language, defaultOptions).format(date);
};
var startOfYearPeriod = (date, years) => {
  const year = date.getFullYear();
  return Math.floor(year / years) * years;
};
var isDateInDecade = (date, startYear) => {
  const year = date.getFullYear();
  const endYear = startYear + 9;
  return year >= startYear && year <= endYear;
};

// node_modules/flowbite-react/lib/esm/components/Datepicker/Views/Days.js
var DatepickerViewsDays = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, weekStart, minDate, maxDate, viewDate, selectedDate, changeSelectedDate, language } = useDatePickerContext();
  const theme2 = mergeDeep(rootTheme.views.days, customTheme);
  const weekDays = getWeekDays(language, weekStart);
  const startDate = getFirstDayOfTheMonth(viewDate, weekStart);
  return (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [(0, import_jsx_runtime24.jsx)("div", { className: theme2.header.base, children: weekDays.map((day, index) => (0, import_jsx_runtime24.jsx)("span", { className: theme2.header.title, children: day }, index)) }), (0, import_jsx_runtime24.jsx)("div", { className: theme2.items.base, children: [...Array(42)].map((_date, index) => {
    const currentDate = addDays(startDate, index);
    const day = getFormattedDate(language, currentDate, { day: "numeric" });
    const isSelected = isDateEqual(selectedDate, currentDate);
    const isDisabled = !isDateInRange(currentDate, minDate, maxDate);
    return (0, import_jsx_runtime24.jsx)("button", { disabled: isDisabled, type: "button", className: twMerge(theme2.items.item.base, isSelected && theme2.items.item.selected, isDisabled && theme2.items.item.disabled), onClick: () => {
      if (isDisabled)
        return;
      changeSelectedDate(currentDate, true);
    }, children: day }, index);
  }) })] });
};

// node_modules/flowbite-react/lib/esm/components/Datepicker/Views/Decades.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var DatepickerViewsDecades = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, selectedDate, viewDate, setViewDate, setView } = useDatePickerContext();
  const theme2 = mergeDeep(rootTheme.views.decades, customTheme);
  return (0, import_jsx_runtime25.jsx)("div", { className: theme2.items.base, children: [...Array(12)].map((_year, index) => {
    const first = startOfYearPeriod(viewDate, 100);
    const year = first - 10 + index * 10;
    const firstDate = new Date(year, 0, 1);
    const lastDate = addYears(firstDate, 9);
    const isSelected = isDateInDecade(viewDate, year);
    const isDisabled = !isDateInRange(viewDate, firstDate, lastDate);
    return (0, import_jsx_runtime25.jsx)("button", { disabled: isDisabled, type: "button", className: twMerge(theme2.items.item.base, isSelected && theme2.items.item.selected, isDisabled && theme2.items.item.disabled), onClick: () => {
      if (isDisabled)
        return;
      setViewDate(addYears(viewDate, year - selectedDate.getFullYear()));
      setView(Views.Years);
    }, children: year }, index);
  }) });
};

// node_modules/flowbite-react/lib/esm/components/Datepicker/Views/Months.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var DatepickerViewsMonth = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, minDate, maxDate, selectedDate, viewDate, language, setViewDate, setView } = useDatePickerContext();
  const theme2 = mergeDeep(rootTheme.views.months, customTheme);
  return (0, import_jsx_runtime26.jsx)("div", { className: theme2.items.base, children: [...Array(12)].map((_month, index) => {
    const newDate = new Date(viewDate.getTime());
    newDate.setMonth(index);
    const month = getFormattedDate(language, newDate, { month: "short" });
    const isSelected = isDateEqual(selectedDate, newDate);
    const isDisabled = !isDateInRange(newDate, minDate, maxDate);
    return (0, import_jsx_runtime26.jsx)("button", { disabled: isDisabled, type: "button", className: twMerge(theme2.items.item.base, isSelected && theme2.items.item.selected, isDisabled && theme2.items.item.disabled), onClick: () => {
      if (isDisabled)
        return;
      setViewDate(newDate);
      setView(Views.Days);
    }, children: month }, index);
  }) });
};

// node_modules/flowbite-react/lib/esm/components/Datepicker/Views/Years.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var DatepickerViewsYears = ({ theme: customTheme = {} }) => {
  const { theme: rootTheme, selectedDate, minDate, maxDate, viewDate, setViewDate, setView } = useDatePickerContext();
  const theme2 = mergeDeep(rootTheme.views.years, customTheme);
  return (0, import_jsx_runtime27.jsx)("div", { className: theme2.items.base, children: [...Array(12)].map((_year, index) => {
    const first = startOfYearPeriod(viewDate, 10);
    const year = first - 1 + index * 1;
    const newDate = new Date(viewDate.getTime());
    newDate.setFullYear(year);
    const isSelected = isDateEqual(selectedDate, newDate);
    const isDisabled = !isDateInRange(newDate, minDate, maxDate);
    return (0, import_jsx_runtime27.jsx)("button", { disabled: isDisabled, type: "button", className: twMerge(theme2.items.item.base, isSelected && theme2.items.item.selected, isDisabled && theme2.items.item.disabled), onClick: () => {
      if (isDisabled)
        return;
      setViewDate(newDate);
      setView(Views.Months);
    }, children: year }, index);
  }) });
};

// node_modules/flowbite-react/lib/esm/components/Datepicker/Datepicker.js
var Datepicker = ({
  title,
  open,
  inline = false,
  autoHide = true,
  // Hide when selected the day
  showClearButton = true,
  labelClearButton = "Clear",
  showTodayButton = true,
  labelTodayButton = "Today",
  defaultDate = /* @__PURE__ */ new Date(),
  minDate,
  maxDate,
  language = "en",
  weekStart = WeekStart.Sunday,
  className,
  theme: customTheme = {},
  onSelectedDateChanged,
  ...props
}) => {
  const theme2 = mergeDeep(getTheme().datepicker, customTheme);
  defaultDate = getFirstDateInRange(defaultDate, minDate, maxDate);
  const [isOpen, setIsOpen] = (0, import_react16.useState)(open);
  const [view, setView] = (0, import_react16.useState)(Views.Days);
  const [selectedDate, setSelectedDate] = (0, import_react16.useState)(defaultDate);
  const [viewDate, setViewDate] = (0, import_react16.useState)(defaultDate);
  const inputRef = (0, import_react16.useRef)(null);
  const datepickerRef = (0, import_react16.useRef)(null);
  const changeSelectedDate = (date, useAutohide) => {
    setSelectedDate(date);
    if (onSelectedDateChanged) {
      onSelectedDateChanged(date);
    }
    if (autoHide && view === Views.Days && useAutohide == true && !inline) {
      setIsOpen(false);
    }
  };
  const renderView = (type) => {
    switch (type) {
      case Views.Decades:
        return (0, import_jsx_runtime28.jsx)(DatepickerViewsDecades, { theme: theme2.views.decades });
      case Views.Years:
        return (0, import_jsx_runtime28.jsx)(DatepickerViewsYears, { theme: theme2.views.years });
      case Views.Months:
        return (0, import_jsx_runtime28.jsx)(DatepickerViewsMonth, { theme: theme2.views.months });
      case Views.Days:
      default:
        return (0, import_jsx_runtime28.jsx)(DatepickerViewsDays, { theme: theme2.views.days });
    }
  };
  const getNextView = () => {
    switch (view) {
      case Views.Days:
        return Views.Months;
      case Views.Months:
        return Views.Years;
      case Views.Years:
        return Views.Decades;
    }
    return view;
  };
  const getViewTitle = () => {
    switch (view) {
      case Views.Decades:
        return `${startOfYearPeriod(viewDate, 100)} - ${startOfYearPeriod(viewDate, 100) + 90}`;
      case Views.Years:
        return `${startOfYearPeriod(viewDate, 10)} - ${startOfYearPeriod(viewDate, 10) + 9}`;
      case Views.Months:
        return getFormattedDate(language, viewDate, { year: "numeric" });
      case Views.Days:
      default:
        return getFormattedDate(language, viewDate, { month: "long", year: "numeric" });
    }
  };
  const getViewDatePage = (view2, date, value) => {
    switch (view2) {
      case Views.Days:
        return new Date(addMonths(date, value));
      case Views.Months:
        return new Date(addYears(date, value));
      case Views.Years:
        return new Date(addYears(date, value * 10));
      case Views.Decades:
        return new Date(addYears(date, value * 100));
      default:
        return new Date(addYears(date, value * 10));
    }
  };
  (0, import_react16.useEffect)(() => {
    const handleClickOutside = (event) => {
      var _a, _b;
      const clickedInsideDatepicker = (_a = datepickerRef == null ? void 0 : datepickerRef.current) == null ? void 0 : _a.contains(event.target);
      const clickedInsideInput = (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.contains(event.target);
      if (!clickedInsideDatepicker && !clickedInsideInput) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [inputRef, datepickerRef, setIsOpen]);
  return (0, import_jsx_runtime28.jsx)(DatepickerContext.Provider, { value: {
    theme: theme2,
    language,
    minDate,
    maxDate,
    weekStart,
    isOpen,
    setIsOpen,
    view,
    setView,
    viewDate,
    setViewDate,
    selectedDate,
    setSelectedDate,
    changeSelectedDate
  }, children: (0, import_jsx_runtime28.jsxs)("div", { className: twMerge(theme2.root.base, className), children: [!inline && (0, import_jsx_runtime28.jsx)(TextInput, { theme: theme2.root.input, icon: HiCalendar, ref: inputRef, onFocus: () => {
    if (!isDateEqual(viewDate, selectedDate)) {
      setViewDate(selectedDate);
    }
    setIsOpen(true);
  }, value: selectedDate && getFormattedDate(language, selectedDate), readOnly: true, ...props }), (isOpen || inline) && (0, import_jsx_runtime28.jsx)("div", { ref: datepickerRef, className: twMerge(theme2.popup.root.base, inline && theme2.popup.root.inline), children: (0, import_jsx_runtime28.jsxs)("div", { className: theme2.popup.root.inner, children: [(0, import_jsx_runtime28.jsxs)("div", { className: theme2.popup.header.base, children: [title && (0, import_jsx_runtime28.jsx)("div", { className: theme2.popup.header.title, children: title }), (0, import_jsx_runtime28.jsxs)("div", { className: theme2.popup.header.selectors.base, children: [(0, import_jsx_runtime28.jsx)("button", { type: "button", className: twMerge(theme2.popup.header.selectors.button.base, theme2.popup.header.selectors.button.prev), onClick: () => setViewDate(getViewDatePage(view, viewDate, -1)), children: (0, import_jsx_runtime28.jsx)(HiArrowLeft, {}) }), (0, import_jsx_runtime28.jsx)("button", { type: "button", className: twMerge(theme2.popup.header.selectors.button.base, theme2.popup.header.selectors.button.view), onClick: () => setView(getNextView()), children: getViewTitle() }), (0, import_jsx_runtime28.jsx)("button", { type: "button", className: twMerge(theme2.popup.header.selectors.button.base, theme2.popup.header.selectors.button.next), onClick: () => setViewDate(getViewDatePage(view, viewDate, 1)), children: (0, import_jsx_runtime28.jsx)(HiArrowRight, {}) })] })] }), (0, import_jsx_runtime28.jsx)("div", { className: theme2.popup.view.base, children: renderView(view) }), (showClearButton || showTodayButton) && (0, import_jsx_runtime28.jsxs)("div", { className: theme2.popup.footer.base, children: [showTodayButton && (0, import_jsx_runtime28.jsx)("button", { type: "button", className: twMerge(theme2.popup.footer.button.base, theme2.popup.footer.button.today), onClick: () => {
    const today = /* @__PURE__ */ new Date();
    changeSelectedDate(today, true);
    setViewDate(today);
  }, children: labelTodayButton }), showClearButton && (0, import_jsx_runtime28.jsx)("button", { type: "button", className: twMerge(theme2.popup.footer.button.base, theme2.popup.footer.button.clear), onClick: () => {
    changeSelectedDate(defaultDate, true);
    if (defaultDate) {
      setViewDate(defaultDate);
    }
  }, children: labelClearButton })] })] }) })] }) });
};
Datepicker.displayName = "Datepicker";

// node_modules/flowbite-react/lib/esm/components/Dropdown/Dropdown.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var import_react22 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/Floating/helpers.js
var getMiddleware = ({ arrowRef, placement }) => {
  const middleware = [];
  middleware.push(offset(8));
  middleware.push(placement === "auto" ? autoPlacement() : flip());
  middleware.push(shift({ padding: 8 }));
  if (arrowRef == null ? void 0 : arrowRef.current) {
    middleware.push(arrow({ element: arrowRef.current }));
  }
  return middleware;
};
var getPlacement = ({ placement }) => {
  return placement === "auto" ? void 0 : placement;
};
var getArrowPlacement = ({ placement }) => {
  return {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  }[placement.split("-")[0]];
};

// node_modules/flowbite-react/lib/esm/hooks/use-floating.js
var useBaseFLoating = ({ open, arrowRef, placement = "top", setOpen }) => {
  return useFloating({
    placement: getPlacement({ placement }),
    open,
    onOpenChange: setOpen,
    whileElementsMounted: autoUpdate,
    middleware: getMiddleware({ placement, arrowRef })
  });
};
var useFloatingInteractions = ({ context, trigger, role = "tooltip", interactions = [] }) => {
  return useInteractions([
    useClick(context, { enabled: trigger === "click" }),
    useHover(context, {
      enabled: trigger === "hover",
      handleClose: safePolygon()
    }),
    useDismiss(context),
    useRole(context, { role }),
    ...interactions
  ]);
};

// node_modules/flowbite-react/lib/esm/components/Dropdown/DropdownContext.js
var import_react19 = __toESM(require_react());
var DropdownContext = (0, import_react19.createContext)(void 0);
function useDropdownContext() {
  const context = (0, import_react19.useContext)(DropdownContext);
  if (!context) {
    throw new Error("useDropdownContext should be used within the DropdownContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Dropdown/DropdownDivider.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var DropdownDivider = ({ className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useDropdownContext();
  const theme2 = customTheme.divider ?? rootTheme.floating.divider;
  return (0, import_jsx_runtime29.jsx)("div", { className: twMerge(theme2, className), ...props });
};

// node_modules/flowbite-react/lib/esm/components/Dropdown/DropdownHeader.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var DropdownHeader = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useDropdownContext();
  const theme2 = customTheme.header ?? rootTheme.floating.header;
  return (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [(0, import_jsx_runtime30.jsx)("div", { className: twMerge(theme2, className), ...props, children }), (0, import_jsx_runtime30.jsx)(DropdownDivider, {})] });
};

// node_modules/flowbite-react/lib/esm/components/Dropdown/DropdownItem.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var DropdownItem = ({ children, className, icon: Icon, onClick, theme: customTheme = {}, ...props }) => {
  const { ref, index } = useListItem({ label: typeof children === "string" ? children : void 0 });
  const { theme: rootTheme, activeIndex, dismissOnClick, getItemProps, handleSelect } = useDropdownContext();
  const isActive = activeIndex === index;
  const theme2 = mergeDeep(rootTheme.floating.item, customTheme);
  const theirProps = props;
  return (0, import_jsx_runtime31.jsx)("li", { role: "menuitem", className: theme2.container, children: (0, import_jsx_runtime31.jsxs)(ButtonBase, { ref, className: twMerge(theme2.base, className), ...theirProps, ...getItemProps({
    onClick: () => {
      onClick && onClick();
      dismissOnClick && handleSelect(null);
    }
  }), tabIndex: isActive ? 0 : -1, children: [Icon && (0, import_jsx_runtime31.jsx)(Icon, { className: theme2.icon }), children] }) });
};

// node_modules/flowbite-react/lib/esm/components/Dropdown/Dropdown.js
var icons = {
  top: HiOutlineChevronUp,
  right: HiOutlineChevronRight,
  bottom: HiOutlineChevronDown,
  left: HiOutlineChevronLeft
};
var Trigger = ({ refs, children, inline, theme: theme2, disabled, setButtonWidth, getReferenceProps, renderTrigger, ...buttonProps }) => {
  const ref = refs.reference;
  const a11yProps = getReferenceProps();
  (0, import_react22.useEffect)(() => {
    if (ref.current) {
      setButtonWidth == null ? void 0 : setButtonWidth(ref.current.clientWidth);
    }
  }, [ref, setButtonWidth]);
  if (renderTrigger) {
    const triggerElement = renderTrigger(theme2);
    return (0, import_react22.cloneElement)(triggerElement, { ref: refs.setReference, disabled, ...a11yProps, ...triggerElement.props });
  }
  return inline ? (0, import_jsx_runtime32.jsx)("button", { type: "button", ref: refs.setReference, className: theme2 == null ? void 0 : theme2.inlineWrapper, disabled, ...a11yProps, children }) : (0, import_jsx_runtime32.jsx)(Button, { ...buttonProps, disabled, type: "button", ref: refs.setReference, ...a11yProps, children });
};
var DropdownComponent = ({ children, className, dismissOnClick = true, theme: customTheme = {}, renderTrigger, ...props }) => {
  const [open, setOpen] = (0, import_react22.useState)(false);
  const [activeIndex, setActiveIndex] = (0, import_react22.useState)(null);
  const [selectedIndex, setSelectedIndex] = (0, import_react22.useState)(null);
  const [buttonWidth, setButtonWidth] = (0, import_react22.useState)(void 0);
  const elementsRef = (0, import_react22.useRef)([]);
  const labelsRef = (0, import_react22.useRef)([]);
  const theme2 = mergeDeep(getTheme().dropdown, customTheme);
  const theirProps = props;
  const dataTestId = props["data-testid"] || "flowbite-dropdown-target";
  const { placement = props.inline ? "bottom-start" : "bottom", trigger = "click", label, inline, arrowIcon = true, ...buttonProps } = theirProps;
  const handleSelect = (0, import_react22.useCallback)((index) => {
    setSelectedIndex(index);
    setOpen(false);
  }, []);
  const handleTypeaheadMatch = (0, import_react22.useCallback)((index) => {
    if (open) {
      setActiveIndex(index);
    } else {
      handleSelect(index);
    }
  }, [open, handleSelect]);
  const { context, floatingStyles, refs } = useBaseFLoating({
    open,
    setOpen,
    placement
  });
  const listNav = useListNavigation(context, {
    listRef: elementsRef,
    activeIndex,
    selectedIndex,
    onNavigate: setActiveIndex
  });
  const typeahead = useTypeahead(context, {
    listRef: labelsRef,
    activeIndex,
    selectedIndex,
    onMatch: handleTypeaheadMatch
  });
  const { getReferenceProps, getFloatingProps, getItemProps } = useFloatingInteractions({
    context,
    role: "menu",
    trigger,
    interactions: [listNav, typeahead]
  });
  const Icon = (0, import_react22.useMemo)(() => {
    const [p2] = placement.split("-");
    return icons[p2] ?? HiOutlineChevronDown;
  }, [placement]);
  return (0, import_jsx_runtime32.jsxs)(DropdownContext.Provider, { value: { theme: theme2, activeIndex, dismissOnClick, getItemProps, handleSelect }, children: [(0, import_jsx_runtime32.jsxs)(Trigger, { ...buttonProps, refs, inline, theme: theme2, "data-testid": dataTestId, className: twMerge(theme2.floating.target, buttonProps.className), setButtonWidth, getReferenceProps, renderTrigger, children: [label, arrowIcon && (0, import_jsx_runtime32.jsx)(Icon, { className: theme2.arrowIcon })] }), open && (0, import_jsx_runtime32.jsx)(FloatingFocusManager, { context, modal: false, children: (0, import_jsx_runtime32.jsx)("div", { ref: refs.setFloating, style: { ...floatingStyles, minWidth: buttonWidth }, "data-testid": "flowbite-dropdown", "aria-expanded": open, ...getFloatingProps({
    className: twMerge(theme2.floating.base, theme2.floating.animation, "duration-100", !open && theme2.floating.hidden, theme2.floating.style.auto, className)
  }), children: (0, import_jsx_runtime32.jsx)(FloatingList, { elementsRef, labelsRef, children: (0, import_jsx_runtime32.jsx)("ul", { className: theme2.content, tabIndex: -1, children }) }) }) })] });
};
DropdownComponent.displayName = "Dropdown";
DropdownHeader.displayName = "Dropdown.Header";
DropdownDivider.displayName = "Dropdown.Divider";
var Dropdown = Object.assign(DropdownComponent, {
  Item: DropdownItem,
  Header: DropdownHeader,
  Divider: DropdownDivider
});

// node_modules/flowbite-react/lib/esm/components/FileInput/FileInput.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var import_react23 = __toESM(require_react());
var FileInput = (0, import_react23.forwardRef)(({ className, color = "gray", helperText, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().fileInput, customTheme);
  return (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [(0, import_jsx_runtime33.jsx)("div", { className: twMerge(theme2.root.base, className), children: (0, import_jsx_runtime33.jsx)("div", { className: theme2.field.base, children: (0, import_jsx_runtime33.jsx)("input", { className: twMerge(theme2.field.input.base, theme2.field.input.colors[color], theme2.field.input.sizes[sizing]), ...props, type: "file", ref }) }) }), helperText && (0, import_jsx_runtime33.jsx)(HelperText, { color, children: helperText })] });
});
FileInput.displayName = "FileInput";

// node_modules/flowbite-react/lib/esm/components/FloatingLabel/FloatingLabel.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_react24 = __toESM(require_react());
var FloatingLabel = (0, import_react24.forwardRef)(({ label, helperText, color = "default", sizing = "md", variant, disabled = false, theme: customTheme = {}, className, ...props }, ref) => {
  const randomId = (0, import_react24.useId)();
  const theme2 = mergeDeep(getTheme().floatingLabel, customTheme);
  return (0, import_jsx_runtime34.jsxs)("div", { children: [(0, import_jsx_runtime34.jsxs)("div", { className: twMerge("relative", variant === "standard" ? "z-0" : ""), children: [(0, import_jsx_runtime34.jsx)("input", { type: "text", id: props.id ? props.id : "floatingLabel" + randomId, "aria-describedby": "outlined_success_help", className: twMerge(theme2.input[color][variant][sizing], className), placeholder: " ", "data-testid": "floating-label", disabled, ...props, ref }), (0, import_jsx_runtime34.jsx)("label", { htmlFor: props.id ? props.id : "floatingLabel" + randomId, className: twMerge(theme2.label[color][variant][sizing], className), children: label })] }), (0, import_jsx_runtime34.jsx)("p", { id: "outlined_helper_text" + randomId, className: twMerge(theme2.helperText[color], className), children: helperText })] });
});
FloatingLabel.displayName = "FloatingLabel";

// node_modules/flowbite-react/lib/esm/components/Flowbite/Flowbite.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/theme-store/init/index.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/theme-store/init/client.js
function ThemeClientInit({ theme: theme2 }) {
  setTheme(theme2);
  return null;
}

// node_modules/flowbite-react/lib/esm/theme-store/init/mode.js
function ThemeModeInit({ mode }) {
  if (mode)
    setThemeMode(mode);
  useThemeMode();
  return null;
}

// node_modules/flowbite-react/lib/esm/theme-store/init/server.js
function ThemeServerInit({ theme: theme2 }) {
  setTheme(theme2);
  return null;
}

// node_modules/flowbite-react/lib/esm/theme-store/init/index.js
function ThemeInit({ mode, theme: theme2 }) {
  return (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [(0, import_jsx_runtime35.jsx)(ThemeModeInit, { mode }), (0, import_jsx_runtime35.jsx)(ThemeServerInit, { theme: theme2 }), (0, import_jsx_runtime35.jsx)(ThemeClientInit, { theme: theme2 })] });
}

// node_modules/flowbite-react/lib/esm/components/Flowbite/Flowbite.js
var Flowbite = ({ children, theme: theme2 }) => {
  return (0, import_jsx_runtime36.jsxs)(import_jsx_runtime36.Fragment, { children: [(0, import_jsx_runtime36.jsx)(ThemeInit, { mode: theme2 == null ? void 0 : theme2.mode, theme: theme2 == null ? void 0 : theme2.theme }), children] });
};
Flowbite.displayName = "Flowbite";

// node_modules/flowbite-react/lib/esm/components/Footer/Footer.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Footer/FooterBrand.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var FooterBrand = ({ alt, className, children, href, name, src, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.brand, customTheme);
  return (0, import_jsx_runtime37.jsx)("div", { children: href ? (0, import_jsx_runtime37.jsxs)("a", { "data-testid": "flowbite-footer-brand", href, className: twMerge(theme2.base, className), ...props, children: [(0, import_jsx_runtime37.jsx)("img", { alt, src, className: theme2.img }), (0, import_jsx_runtime37.jsx)("span", { "data-testid": "flowbite-footer-brand-span", className: theme2.span, children: name }), children] }) : (0, import_jsx_runtime37.jsx)("img", { alt, "data-testid": "flowbite-footer-brand", src, className: twMerge(theme2.img, className), ...props }) });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterCopyright.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var FooterCopyright = ({ by, className, href, theme: customTheme = {}, year, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.copyright, customTheme);
  return (0, import_jsx_runtime38.jsxs)("div", { "data-testid": "flowbite-footer-copyright", className: twMerge(theme2.base, className), ...props, children: ["© ", year, href ? (0, import_jsx_runtime38.jsx)("a", { href, className: theme2.href, children: by }) : (0, import_jsx_runtime38.jsx)("span", { "data-testid": "flowbite-footer-copyright-span", className: theme2.span, children: by })] });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterDivider.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var FooterDivider = ({ className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.divider, customTheme);
  return (0, import_jsx_runtime39.jsx)("hr", { "data-testid": "footer-divider", className: twMerge(theme2.base, className), ...props });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterIcon.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var FooterIcon = ({ ariaLabel, className, href, icon: Icon, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.icon, customTheme);
  return (0, import_jsx_runtime40.jsx)("div", { children: href ? (0, import_jsx_runtime40.jsx)("a", { "aria-label": ariaLabel, "data-testid": "flowbite-footer-icon", href, className: twMerge(theme2.base, className), ...props, children: (0, import_jsx_runtime40.jsx)(Icon, { className: theme2.size }) }) : (0, import_jsx_runtime40.jsx)(Icon, { "data-testid": "flowbite-footer-icon", className: theme2.size, ...props }) });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterLink.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var FooterLink = ({ as: Component = "a", children, className, href, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.groupLink.link, customTheme);
  return (0, import_jsx_runtime41.jsx)("li", { className: twMerge(theme2.base, className), children: (0, import_jsx_runtime41.jsx)(Component, { href, className: theme2.href, ...props, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterLinkGroup.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var FooterLinkGroup = ({ children, className, col = false, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.groupLink, customTheme);
  return (0, import_jsx_runtime42.jsx)("ul", { "data-testid": "footer-groupLink", className: twMerge(theme2.base, col && theme2.col, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Footer/FooterTitle.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var FooterTitle = ({ as: Component = "h2", className, theme: customTheme = {}, title, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer.title, customTheme);
  return (0, import_jsx_runtime43.jsx)(Component, { "data-testid": "flowbite-footer-title", className: twMerge(theme2.base, className), ...props, children: title });
};

// node_modules/flowbite-react/lib/esm/components/Footer/Footer.js
var FooterComponent = ({ bgDark = false, children, className, container = false, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().footer, customTheme);
  return (0, import_jsx_runtime44.jsx)("footer", { "data-testid": "flowbite-footer", className: twMerge(theme2.root.base, bgDark && theme2.root.bgDark, container && theme2.root.container, className), ...props, children });
};
FooterComponent.displayName = "Footer";
FooterCopyright.displayName = "Footer.Copyright";
FooterLink.displayName = "Footer.Link";
FooterBrand.displayName = "Footer.Brand";
FooterLinkGroup.displayName = "Footer.LinkGroup";
FooterIcon.displayName = "Footer.Icon";
FooterTitle.displayName = "Footer.Title";
FooterDivider.displayName = "Footer.Divider";
var Footer = Object.assign(FooterComponent, {
  Copyright: FooterCopyright,
  Link: FooterLink,
  LinkGroup: FooterLinkGroup,
  Brand: FooterBrand,
  Icon: FooterIcon,
  Title: FooterTitle,
  Divider: FooterDivider
});

// node_modules/flowbite-react/lib/esm/components/Kbd/Kbd.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var Kbd = ({ children, className, icon: Icon, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().kbd, customTheme);
  return (0, import_jsx_runtime45.jsxs)("span", { className: twMerge(theme2.root.base, className), "data-testid": "flowbite-kbd", ...props, children: [Icon && (0, import_jsx_runtime45.jsx)(Icon, { className: theme2.root.icon, "data-testid": "flowbite-kbd-icon" }), children] });
};
Kbd.displayName = "Kbd";

// node_modules/flowbite-react/lib/esm/components/Label/Label.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var Label = ({ children, className, color = "default", disabled = false, theme: customTheme = {}, value, ...props }) => {
  const theme2 = mergeDeep(getTheme().label, customTheme);
  return (0, import_jsx_runtime46.jsx)("label", { className: twMerge(theme2.root.base, theme2.root.colors[color], disabled && theme2.root.disabled, className), "data-testid": "flowbite-label", ...props, children: value ?? children ?? "" });
};
Label.displayName = "Label";

// node_modules/flowbite-react/lib/esm/components/List/List.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/List/ListItem.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var ListItem = ({ children, className, theme: customTheme = {} }) => {
  const theme2 = mergeDeep(getTheme().listGroup.item, customTheme);
  return (0, import_jsx_runtime47.jsx)("li", { className: twMerge(theme2.base, className), children });
};

// node_modules/flowbite-react/lib/esm/components/List/List.js
var ListComponent = ({ children, className, unstyled, nested, ordered, horizontal, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().list, customTheme);
  const Component = ordered ? "ol" : "ul";
  return (0, import_jsx_runtime48.jsx)(Component, { className: twMerge(theme2.root.base, theme2.root.ordered[ordered ? "on" : "off"], unstyled && theme2.root.unstyled, nested && theme2.root.nested, horizontal && theme2.root.horizontal, className), ...props, children });
};
ListComponent.displayName = "List";
ListItem.displayName = "List.Item";
var List = Object.assign(ListComponent, { Item: ListItem });

// node_modules/flowbite-react/lib/esm/components/ListGroup/ListGroup.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/ListGroup/ListGroupItem.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var ListGroupItem = ({ active: isActive, children, className, href, icon: Icon, onClick, theme: customTheme = {}, disabled, ...props }) => {
  const theme2 = mergeDeep(getTheme().listGroup.item, customTheme);
  const isLink = typeof href !== "undefined";
  const Component = isLink ? "a" : "button";
  return (0, import_jsx_runtime49.jsx)("li", { className: twMerge(theme2.base, className), children: (0, import_jsx_runtime49.jsxs)(Component, { href, onClick, type: isLink ? void 0 : "button", disabled, className: twMerge(theme2.link.active[isActive ? "on" : "off"], theme2.link.disabled[disabled ? "on" : "off"], theme2.link.base, theme2.link.href[isLink ? "on" : "off"]), ...props, children: [Icon && (0, import_jsx_runtime49.jsx)(Icon, { "aria-hidden": true, "data-testid": "flowbite-list-group-item-icon", className: theme2.link.icon }), children] }) });
};

// node_modules/flowbite-react/lib/esm/components/ListGroup/ListGroup.js
var ListGroupComponent = ({ children, className, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().listGroup, customTheme);
  return (0, import_jsx_runtime50.jsx)("ul", { className: twMerge(theme2.root.base, className), ...props, children });
};
ListGroupComponent.displayName = "ListGroup";
ListGroupItem.displayName = "ListGroup.Item";
var ListGroup = Object.assign(ListGroupComponent, {
  Item: ListGroupItem
});

// node_modules/flowbite-react/lib/esm/components/Navbar/Navbar.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var import_react26 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarBrand.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarContext.js
var import_react25 = __toESM(require_react());
var NavbarContext = (0, import_react25.createContext)(void 0);
function useNavbarContext() {
  const context = (0, import_react25.useContext)(NavbarContext);
  if (!context) {
    throw new Error("useNavBarContext should be used within the NavbarContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarBrand.js
var NavbarBrand = ({ as: Component = "a", children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useNavbarContext();
  const theme2 = mergeDeep(rootTheme.brand, customTheme);
  return (0, import_jsx_runtime51.jsx)(Component, { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarCollapse.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var NavbarCollapse = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, isOpen } = useNavbarContext();
  const theme2 = mergeDeep(rootTheme.collapse, customTheme);
  return (0, import_jsx_runtime52.jsx)("div", { "data-testid": "flowbite-navbar-collapse", className: twMerge(theme2.base, theme2.hidden[!isOpen ? "on" : "off"], className), ...props, children: (0, import_jsx_runtime52.jsx)("ul", { className: theme2.list, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarLink.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var NavbarLink = ({ active, as: Component = "a", disabled, children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useNavbarContext();
  const theme2 = mergeDeep(rootTheme.link, customTheme);
  return (0, import_jsx_runtime53.jsx)("li", { children: (0, import_jsx_runtime53.jsx)(Component, { className: twMerge(theme2.base, active && theme2.active.on, !active && !disabled && theme2.active.off, theme2.disabled[disabled ? "on" : "off"], className), ...props, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarToggle.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/node_modules/react-icons/fa/index.esm.js
function FaBars(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z" } }] })(props);
}

// node_modules/flowbite-react/lib/esm/components/Navbar/NavbarToggle.js
var NavbarToggle = ({ barIcon: BarIcon = FaBars, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, isOpen, setIsOpen } = useNavbarContext();
  const theme2 = mergeDeep(rootTheme.toggle, customTheme);
  const handleClick = () => {
    setIsOpen(!isOpen);
  };
  return (0, import_jsx_runtime54.jsxs)("button", { "data-testid": "flowbite-navbar-toggle", onClick: handleClick, className: twMerge(theme2.base, className), ...props, children: [(0, import_jsx_runtime54.jsx)("span", { className: "sr-only", children: "Open main menu" }), (0, import_jsx_runtime54.jsx)(BarIcon, { "aria-hidden": true, className: theme2.icon })] });
};

// node_modules/flowbite-react/lib/esm/components/Navbar/Navbar.js
var NavbarComponent = ({ border, children, className, fluid = false, menuOpen, rounded, theme: customTheme = {}, ...props }) => {
  const [isOpen, setIsOpen] = (0, import_react26.useState)(menuOpen);
  const theme2 = mergeDeep(getTheme().navbar, customTheme);
  return (0, import_jsx_runtime55.jsx)(NavbarContext.Provider, { value: { theme: theme2, isOpen, setIsOpen }, children: (0, import_jsx_runtime55.jsx)("nav", { className: twMerge(theme2.root.base, theme2.root.bordered[border ? "on" : "off"], theme2.root.rounded[rounded ? "on" : "off"], className), ...props, children: (0, import_jsx_runtime55.jsx)("div", { className: twMerge(theme2.root.inner.base, theme2.root.inner.fluid[fluid ? "on" : "off"]), children }) }) });
};
NavbarComponent.displayName = "Navbar";
NavbarBrand.displayName = "Navbar.Brand";
NavbarCollapse.displayName = "Navbar.Collapse";
NavbarLink.displayName = "Navbar.Link";
NavbarToggle.displayName = "Navbar.Toggle";
var Navbar = Object.assign(NavbarComponent, {
  Brand: NavbarBrand,
  Collapse: NavbarCollapse,
  Link: NavbarLink,
  Toggle: NavbarToggle
});

// node_modules/flowbite-react/lib/esm/components/Pagination/Pagination.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Pagination/PaginationButton.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var PaginationButton = ({ active, children, className, onClick, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().pagination, customTheme);
  return (0, import_jsx_runtime56.jsx)("button", { type: "button", className: twMerge(active && theme2.pages.selector.active, className), onClick, ...props, children });
};
PaginationButton.displayName = "Pagination.Button";
var PaginationNavigation = ({ children, className, onClick, theme: customTheme = {}, disabled = false, ...props }) => {
  const theme2 = mergeDeep(getTheme().pagination, customTheme);
  return (0, import_jsx_runtime56.jsx)("button", { type: "button", className: twMerge(disabled && theme2.pages.selector.disabled, className), disabled, onClick, ...props, children });
};
PaginationNavigation.displayName = "Pagination.Navigation";

// node_modules/flowbite-react/lib/esm/components/Pagination/helpers.js
var range = (start, end) => {
  if (start >= end) {
    return [];
  }
  return [...Array(end - start + 1).keys()].map((key) => key + start);
};

// node_modules/flowbite-react/lib/esm/components/Pagination/Pagination.js
var PaginationComponent = ({ className, currentPage, layout = "pagination", nextLabel = "Next", onPageChange, previousLabel = "Previous", renderPaginationButton = (props2) => (0, import_jsx_runtime57.jsx)(PaginationButton, { ...props2 }), showIcons: showIcon = false, theme: customTheme = {}, totalPages, ...props }) => {
  const theme2 = mergeDeep(getTheme().pagination, customTheme);
  const lastPage = Math.min(Math.max(layout === "pagination" ? currentPage + 2 : currentPage + 4, 5), totalPages);
  const firstPage = Math.max(1, lastPage - 4);
  const goToNextPage = () => {
    onPageChange(Math.min(currentPage + 1, totalPages));
  };
  const goToPreviousPage = () => {
    onPageChange(Math.max(currentPage - 1, 1));
  };
  return (0, import_jsx_runtime57.jsxs)("nav", { className: twMerge(theme2.base, className), ...props, children: [layout === "table" && (0, import_jsx_runtime57.jsxs)("div", { className: theme2.layout.table.base, children: ["Showing ", (0, import_jsx_runtime57.jsx)("span", { className: theme2.layout.table.span, children: firstPage }), " to ", (0, import_jsx_runtime57.jsx)("span", { className: theme2.layout.table.span, children: lastPage }), " of ", (0, import_jsx_runtime57.jsx)("span", { className: theme2.layout.table.span, children: totalPages }), " Entries"] }), (0, import_jsx_runtime57.jsxs)("ul", { className: theme2.pages.base, children: [(0, import_jsx_runtime57.jsx)("li", { children: (0, import_jsx_runtime57.jsxs)(PaginationNavigation, { className: twMerge(theme2.pages.previous.base, showIcon && theme2.pages.showIcon), onClick: goToPreviousPage, disabled: currentPage === 1, children: [showIcon && (0, import_jsx_runtime57.jsx)(HiChevronLeft, { "aria-hidden": true, className: theme2.pages.previous.icon }), previousLabel] }) }), layout === "pagination" && range(firstPage, lastPage).map((page) => (0, import_jsx_runtime57.jsx)("li", { "aria-current": page === currentPage ? "page" : void 0, children: renderPaginationButton({
    className: twMerge(theme2.pages.selector.base, currentPage === page && theme2.pages.selector.active),
    active: page === currentPage,
    onClick: () => onPageChange(page),
    children: page
  }) }, page)), (0, import_jsx_runtime57.jsx)("li", { children: (0, import_jsx_runtime57.jsxs)(PaginationNavigation, { className: twMerge(theme2.pages.next.base, showIcon && theme2.pages.showIcon), onClick: goToNextPage, disabled: currentPage === totalPages, children: [nextLabel, showIcon && (0, import_jsx_runtime57.jsx)(HiChevronRight, { "aria-hidden": true, className: theme2.pages.next.icon })] }) })] })] });
};
PaginationComponent.displayName = "Pagination";
var Pagination = Object.assign(PaginationComponent, {
  Button: PaginationButton
});

// node_modules/flowbite-react/lib/esm/components/Progress/Progress.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var import_react27 = __toESM(require_react());
var Progress = ({ className, color = "cyan", labelProgress = false, labelText = false, progress, progressLabelPosition = "inside", size = "md", textLabel = "progressbar", textLabelPosition = "inside", theme: customTheme = {}, ...props }) => {
  const id = (0, import_react27.useId)();
  const theme2 = mergeDeep(getTheme().progress, customTheme);
  return (0, import_jsx_runtime58.jsx)(import_jsx_runtime58.Fragment, { children: (0, import_jsx_runtime58.jsxs)("div", { id, "aria-label": textLabel, "aria-valuenow": progress, role: "progressbar", ...props, children: [(textLabel && labelText && textLabelPosition === "outside" || progress > 0 && labelProgress && progressLabelPosition === "outside") && (0, import_jsx_runtime58.jsxs)("div", { className: theme2.label, "data-testid": "flowbite-progress-outer-label-container", children: [textLabel && labelText && textLabelPosition === "outside" && (0, import_jsx_runtime58.jsx)("span", { "data-testid": "flowbite-progress-outer-text-label", children: textLabel }), labelProgress && progressLabelPosition === "outside" && (0, import_jsx_runtime58.jsxs)("span", { "data-testid": "flowbite-progress-outer-progress-label", children: [progress, "%"] })] }), (0, import_jsx_runtime58.jsx)("div", { className: twMerge(theme2.base, theme2.size[size], className), children: (0, import_jsx_runtime58.jsxs)("div", { style: { width: `${progress}%` }, className: twMerge(theme2.bar, theme2.color[color], theme2.size[size]), children: [textLabel && labelText && textLabelPosition === "inside" && (0, import_jsx_runtime58.jsx)("span", { "data-testid": "flowbite-progress-inner-text-label", children: textLabel }), progress > 0 && labelProgress && progressLabelPosition === "inside" && (0, import_jsx_runtime58.jsxs)("span", { "data-testid": "flowbite-progress-inner-progress-label", children: [progress, "%"] })] }) })] }) });
};
Progress.displayName = "Progress";

// node_modules/flowbite-react/lib/esm/components/Radio/Radio.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var import_react28 = __toESM(require_react());
var Radio = (0, import_react28.forwardRef)(({ className, theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().radio, customTheme);
  return (0, import_jsx_runtime59.jsx)("input", { ref, type: "radio", className: twMerge(theme2.root.base, className), ...props });
});
Radio.displayName = "Radio";

// node_modules/flowbite-react/lib/esm/components/RangeSlider/RangeSlider.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var import_react29 = __toESM(require_react());
var RangeSlider = (0, import_react29.forwardRef)(({ className, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().rangeSlider, customTheme);
  return (0, import_jsx_runtime60.jsx)(import_jsx_runtime60.Fragment, { children: (0, import_jsx_runtime60.jsx)("div", { "data-testid": "flowbite-range-slider", className: twMerge(theme2.root.base, className), children: (0, import_jsx_runtime60.jsx)("div", { className: theme2.field.base, children: (0, import_jsx_runtime60.jsx)("input", { ref, type: "range", className: twMerge(theme2.field.input.base, theme2.field.input.sizes[sizing]), ...props }) }) }) });
});
RangeSlider.displayName = "RangeSlider";

// node_modules/flowbite-react/lib/esm/components/Rating/Rating.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Rating/RatingAdvanced.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var RatingAdvanced = ({ children, className, percentFilled = 0, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().ratingAdvanced, customTheme);
  return (0, import_jsx_runtime61.jsxs)("div", { className: twMerge(theme2.base, className), ...props, children: [(0, import_jsx_runtime61.jsx)("span", { className: theme2.label, children }), (0, import_jsx_runtime61.jsx)("div", { className: theme2.progress.base, children: (0, import_jsx_runtime61.jsx)("div", { className: theme2.progress.fill, "data-testid": "flowbite-rating-fill", style: { width: `${percentFilled}%` } }) }), (0, import_jsx_runtime61.jsx)("span", { className: theme2.progress.label, children: `${percentFilled}%` })] });
};

// node_modules/flowbite-react/lib/esm/components/Rating/RatingContext.js
var import_react30 = __toESM(require_react());
var RatingContext = (0, import_react30.createContext)(void 0);
function useRatingContext() {
  const context = (0, import_react30.useContext)(RatingContext);
  if (!context) {
    throw new Error("useRatingContext should be used within the RatingContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Rating/RatingStar.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var RatingStar = ({ className, filled = true, starIcon: Icon = HiStar, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, size = "sm" } = useRatingContext();
  const theme2 = mergeDeep(rootTheme.star, customTheme);
  return (0, import_jsx_runtime62.jsx)(Icon, { "data-testid": "flowbite-rating-star", className: twMerge(theme2.sizes[size], theme2[filled ? "filled" : "empty"], className), ...props });
};

// node_modules/flowbite-react/lib/esm/components/Rating/Rating.js
var RatingComponent = ({ children, className, size = "sm", theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().rating, customTheme);
  return (0, import_jsx_runtime63.jsx)(RatingContext.Provider, { value: { theme: theme2, size }, children: (0, import_jsx_runtime63.jsx)("div", { className: twMerge(theme2.root.base, className), ...props, children }) });
};
RatingComponent.displayName = "Rating";
RatingStar.displayName = "Rating.Star";
RatingAdvanced.displayName = "Rating.Advanced";
var Rating = Object.assign(RatingComponent, {
  Star: RatingStar,
  Advanced: RatingAdvanced
});

// node_modules/flowbite-react/lib/esm/components/Select/Select.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_react31 = __toESM(require_react());
var Select = (0, import_react31.forwardRef)(({ addon, children, className, color = "gray", helperText, icon: Icon, shadow, sizing = "md", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().select, customTheme);
  return (0, import_jsx_runtime64.jsxs)("div", { className: twMerge(theme2.base, className), children: [addon && (0, import_jsx_runtime64.jsx)("span", { className: theme2.addon, children: addon }), (0, import_jsx_runtime64.jsxs)("div", { className: theme2.field.base, children: [Icon && (0, import_jsx_runtime64.jsx)("div", { className: theme2.field.icon.base, children: (0, import_jsx_runtime64.jsx)(Icon, { className: theme2.field.icon.svg }) }), (0, import_jsx_runtime64.jsx)("select", { className: twMerge(theme2.field.select.base, theme2.field.select.colors[color], theme2.field.select.sizes[sizing], theme2.field.select.withIcon[Icon ? "on" : "off"], theme2.field.select.withAddon[addon ? "on" : "off"], theme2.field.select.withShadow[shadow ? "on" : "off"]), ...props, ref, children }), helperText && (0, import_jsx_runtime64.jsx)(HelperText, { color, children: helperText })] })] });
});
Select.displayName = "Select";

// node_modules/flowbite-react/lib/esm/components/Sidebar/Sidebar.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarCTA.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarContext.js
var import_react32 = __toESM(require_react());
var SidebarContext = (0, import_react32.createContext)(void 0);
function useSidebarContext() {
  const context = (0, import_react32.useContext)(SidebarContext);
  if (!context) {
    throw new Error("useSidebarContext should be used within the SidebarContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarCTA.js
var SidebarCTA = ({ children, color = "info", className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme2 = mergeDeep(rootTheme.cta, customTheme);
  return (0, import_jsx_runtime65.jsx)("div", { "data-testid": "sidebar-cta", hidden: isCollapsed, className: twMerge(theme2.base, theme2.color[color], className), ...props, children });
};
SidebarCTA.displayName = "Sidebar.CTA";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarCollapse.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var import_react36 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/Tooltip/Tooltip.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Floating/Floating.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var import_react34 = __toESM(require_react());
var Floating = ({ animation = "duration-300", arrow: arrow2 = true, children, className, content, placement = "top", style = "dark", theme: theme2, trigger = "hover", minWidth, ...props }) => {
  const arrowRef = (0, import_react34.useRef)(null);
  const [open, setOpen] = (0, import_react34.useState)(false);
  const floatingProperties = useBaseFLoating({
    open,
    placement,
    arrowRef,
    setOpen
  });
  const { context, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, refs, strategy, update, x, y } = floatingProperties;
  const focus = useFocus(context);
  const { getFloatingProps, getReferenceProps } = useFloatingInteractions({
    context,
    role: "tooltip",
    trigger,
    interactions: [focus]
  });
  (0, import_react34.useEffect)(() => {
    if (refs.reference.current && refs.floating.current && open) {
      return autoUpdate(refs.reference.current, refs.floating.current, update);
    }
  }, [open, refs.floating, refs.reference, update]);
  return (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [(0, import_jsx_runtime66.jsx)("div", { ref: refs.setReference, className: theme2.target, "data-testid": "flowbite-tooltip-target", ...getReferenceProps(), children }), (0, import_jsx_runtime66.jsxs)("div", { ref: refs.setFloating, "data-testid": "flowbite-tooltip", ...getFloatingProps({
    className: twMerge(theme2.base, animation && `${theme2.animation} ${animation}`, !open && theme2.hidden, theme2.style[style], className),
    style: {
      position: strategy,
      top: y ?? " ",
      left: x ?? " ",
      minWidth
    },
    ...props
  }), children: [(0, import_jsx_runtime66.jsx)("div", { className: theme2.content, children: content }), arrow2 && (0, import_jsx_runtime66.jsx)("div", { className: twMerge(theme2.arrow.base, style === "dark" && theme2.arrow.style.dark, style === "light" && theme2.arrow.style.light, style === "auto" && theme2.arrow.style.auto), "data-testid": "flowbite-tooltip-arrow", ref: arrowRef, style: {
    top: arrowY ?? " ",
    left: arrowX ?? " ",
    right: " ",
    bottom: " ",
    [getArrowPlacement({ placement: floatingProperties.placement })]: theme2.arrow.placement
  }, children: " " })] })] });
};

// node_modules/flowbite-react/lib/esm/components/Tooltip/Tooltip.js
var Tooltip = ({ animation = "duration-300", arrow: arrow2 = true, children, className, content, placement = "top", style = "dark", theme: customTheme = {}, trigger = "hover", ...props }) => {
  const theme2 = mergeDeep(getTheme().tooltip, customTheme);
  return (0, import_jsx_runtime67.jsx)(Floating, { animation, arrow: arrow2, content, placement, style, theme: theme2, trigger, className, ...props, children });
};
Tooltip.displayName = "Tooltip";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarItemContext.js
var import_react35 = __toESM(require_react());
var SidebarItemContext = (0, import_react35.createContext)(void 0);
function useSidebarItemContext() {
  const context = (0, import_react35.useContext)(SidebarItemContext);
  if (!context) {
    throw new Error("useSidebarItemContext should be used within the SidebarItemContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarCollapse.js
var SidebarCollapse = ({ children, className, icon: Icon, label, chevronIcon: ChevronIcon = HiChevronDown, renderChevronIcon, open = false, theme: customTheme = {}, ...props }) => {
  const id = (0, import_react36.useId)();
  const [isOpen, setOpen] = (0, import_react36.useState)(open);
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme2 = mergeDeep(rootTheme.collapse, customTheme);
  (0, import_react36.useEffect)(() => setOpen(open), [open]);
  const Wrapper = ({ children: children2 }) => (0, import_jsx_runtime68.jsx)("li", { children: isCollapsed && !isOpen ? (0, import_jsx_runtime68.jsx)(Tooltip, { content: label, placement: "right", children: children2 }) : children2 });
  return (0, import_jsx_runtime68.jsxs)(Wrapper, { children: [(0, import_jsx_runtime68.jsxs)("button", { id: `flowbite-sidebar-collapse-${id}`, onClick: () => setOpen(!isOpen), title: label, type: "button", className: twMerge(theme2.button, className), ...props, children: [Icon && (0, import_jsx_runtime68.jsx)(Icon, { "aria-hidden": true, "data-testid": "flowbite-sidebar-collapse-icon", className: twMerge(theme2.icon.base, theme2.icon.open[isOpen ? "on" : "off"]) }), isCollapsed ? (0, import_jsx_runtime68.jsx)("span", { className: "sr-only", children: label }) : (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [(0, import_jsx_runtime68.jsx)("span", { "data-testid": "flowbite-sidebar-collapse-label", className: theme2.label.base, children: label }), renderChevronIcon ? renderChevronIcon(theme2, isOpen) : (0, import_jsx_runtime68.jsx)(ChevronIcon, { "aria-hidden": true, className: twMerge(theme2.label.icon.base, theme2.label.icon.open[isOpen ? "on" : "off"]) })] })] }), (0, import_jsx_runtime68.jsx)("ul", { "aria-labelledby": `flowbite-sidebar-collapse-${id}`, hidden: !isOpen, className: theme2.list, children: (0, import_jsx_runtime68.jsx)(SidebarItemContext.Provider, { value: { isInsideCollapse: true }, children }) })] });
};
SidebarCollapse.displayName = "Sidebar.Collapse";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarItem.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var import_react37 = __toESM(require_react());
var ListItem2 = ({ id, theme: theme2, isCollapsed, tooltipChildren, children: wrapperChildren, ...props }) => (0, import_jsx_runtime69.jsx)("li", { ...props, children: isCollapsed ? (0, import_jsx_runtime69.jsx)(Tooltip, { content: (0, import_jsx_runtime69.jsx)(Children4, { id, theme: theme2, children: tooltipChildren }), placement: "right", children: wrapperChildren }) : wrapperChildren });
var Children4 = ({ id, theme: theme2, children }) => {
  return (0, import_jsx_runtime69.jsx)("span", { "data-testid": "flowbite-sidebar-item-content", id: `flowbite-sidebar-item-${id}`, className: twMerge(theme2.content.base), children });
};
var SidebarItem = (0, import_react37.forwardRef)(({ active: isActive, as: Component = "a", children, className, icon: Icon, label, labelColor = "info", theme: customTheme = {}, ...props }, ref) => {
  var _a, _b, _c, _d;
  const id = (0, import_react37.useId)();
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const { isInsideCollapse } = useSidebarItemContext();
  const theme2 = mergeDeep(rootTheme.item, customTheme);
  return (0, import_jsx_runtime69.jsx)(ListItem2, { theme: theme2, className: theme2.listItem, id, isCollapsed, tooltipChildren: children, children: (0, import_jsx_runtime69.jsxs)(Component, { "aria-labelledby": `flowbite-sidebar-item-${id}`, ref, className: twMerge(theme2.base, isActive && theme2.active, !isCollapsed && isInsideCollapse && ((_a = theme2.collapsed) == null ? void 0 : _a.insideCollapse), className), ...props, children: [Icon && (0, import_jsx_runtime69.jsx)(Icon, { "aria-hidden": true, "data-testid": "flowbite-sidebar-item-icon", className: twMerge((_b = theme2.icon) == null ? void 0 : _b.base, isActive && ((_c = theme2.icon) == null ? void 0 : _c.active)) }), isCollapsed && !Icon && (0, import_jsx_runtime69.jsx)("span", { className: (_d = theme2.collapsed) == null ? void 0 : _d.noIcon, children: children.charAt(0).toLocaleUpperCase() ?? "?" }), !isCollapsed && (0, import_jsx_runtime69.jsx)(Children4, { id, theme: theme2, children }), !isCollapsed && label && (0, import_jsx_runtime69.jsx)(Badge, { color: labelColor, "data-testid": "flowbite-sidebar-label", hidden: isCollapsed, className: theme2.label, children: label })] }) });
});
SidebarItem.displayName = "Sidebar.Item";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarItemGroup.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var SidebarItemGroup = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useSidebarContext();
  const theme2 = mergeDeep(rootTheme.itemGroup, customTheme);
  return (0, import_jsx_runtime70.jsx)("ul", { "data-testid": "flowbite-sidebar-item-group", className: twMerge(theme2.base, className), ...props, children: (0, import_jsx_runtime70.jsx)(SidebarItemContext.Provider, { value: { isInsideCollapse: false }, children }) });
};
SidebarItemGroup.displayName = "Sidebar.ItemGroup";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarItems.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var SidebarItems = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useSidebarContext();
  const theme2 = mergeDeep(rootTheme.items, customTheme);
  return (0, import_jsx_runtime71.jsx)("div", { className: twMerge(theme2.base, className), "data-testid": "flowbite-sidebar-items", ...props, children });
};
SidebarItems.displayName = "Sidebar.Items";

// node_modules/flowbite-react/lib/esm/components/Sidebar/SidebarLogo.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var import_react38 = __toESM(require_react());
var SidebarLogo = ({ children, className, href, img, imgAlt = "", theme: customTheme = {}, ...props }) => {
  const id = (0, import_react38.useId)();
  const { theme: rootTheme, isCollapsed } = useSidebarContext();
  const theme2 = mergeDeep(rootTheme.logo, customTheme);
  return (0, import_jsx_runtime72.jsxs)("a", { "aria-labelledby": `flowbite-sidebar-logo-${id}`, href, className: twMerge(theme2.base, className), ...props, children: [(0, import_jsx_runtime72.jsx)("img", { alt: imgAlt, src: img, className: theme2.img }), (0, import_jsx_runtime72.jsx)("span", { className: theme2.collapsed[isCollapsed ? "on" : "off"], id: `flowbite-sidebar-logo-${id}`, children })] });
};
SidebarLogo.displayName = "Sidebar.Logo";

// node_modules/flowbite-react/lib/esm/components/Sidebar/Sidebar.js
var SidebarComponent = ({ children, as: Component = "nav", collapseBehavior = "collapse", collapsed: isCollapsed = false, theme: customTheme = {}, className, ...props }) => {
  const theme2 = mergeDeep(getTheme().sidebar, customTheme);
  return (0, import_jsx_runtime73.jsx)(SidebarContext.Provider, { value: { theme: theme2, isCollapsed }, children: (0, import_jsx_runtime73.jsx)(Component, { "aria-label": "Sidebar", hidden: isCollapsed && collapseBehavior === "hide", className: twMerge(theme2.root.base, theme2.root.collapsed[isCollapsed ? "on" : "off"], className), ...props, children: (0, import_jsx_runtime73.jsx)("div", { className: theme2.root.inner, children }) }) });
};
SidebarComponent.displayName = "Sidebar";
var Sidebar = Object.assign(SidebarComponent, {
  Collapse: SidebarCollapse,
  CTA: SidebarCTA,
  Item: SidebarItem,
  Items: SidebarItems,
  ItemGroup: SidebarItemGroup,
  Logo: SidebarLogo
});

// node_modules/flowbite-react/lib/esm/components/Table/Table.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Table/TableBody.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Table/TableBodyContext.js
var import_react39 = __toESM(require_react());
var TableBodyContext = (0, import_react39.createContext)(void 0);
function useTableBodyContext() {
  const context = (0, import_react39.useContext)(TableBodyContext);
  if (!context) {
    throw new Error("useTableBodyContext should be used within the TableBodyContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Table/TableContext.js
var import_react40 = __toESM(require_react());
var TableContext = (0, import_react40.createContext)(void 0);
function useTableContext() {
  const context = (0, import_react40.useContext)(TableContext);
  if (!context) {
    throw new Error("useTableContext should be used within the TableContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Table/TableBody.js
var TableBody = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useTableContext();
  const theme2 = mergeDeep(rootTheme.body, customTheme);
  return (0, import_jsx_runtime74.jsx)(TableBodyContext.Provider, { value: { theme: theme2 }, children: (0, import_jsx_runtime74.jsx)("tbody", { className: twMerge(theme2.base, className), ...props, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Table/TableCell.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var TableCell = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: bodyTheme } = useTableBodyContext();
  const theme2 = mergeDeep(bodyTheme.cell, customTheme);
  return (0, import_jsx_runtime75.jsx)("td", { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Table/TableHead.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Table/TableHeadContext.js
var import_react41 = __toESM(require_react());
var TableHeadContext = (0, import_react41.createContext)(void 0);
function useTableHeadContext() {
  const context = (0, import_react41.useContext)(TableHeadContext);
  if (!context) {
    throw new Error("useTableHeadContext should be used within the TableHeadContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Table/TableHead.js
var TableHead = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme } = useTableContext();
  const theme2 = mergeDeep(rootTheme.head, customTheme);
  return (0, import_jsx_runtime76.jsx)(TableHeadContext.Provider, { value: { theme: theme2 }, children: (0, import_jsx_runtime76.jsx)("thead", { className: twMerge(theme2.base, className), ...props, children: (0, import_jsx_runtime76.jsx)("tr", { children }) }) });
};

// node_modules/flowbite-react/lib/esm/components/Table/TableHeadCell.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var TableHeadCell = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: headTheme } = useTableHeadContext();
  const theme2 = mergeDeep(headTheme.cell, customTheme);
  return (0, import_jsx_runtime77.jsx)("th", { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Table/TableRow.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var TableRow = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, hoverable, striped } = useTableContext();
  const theme2 = mergeDeep(rootTheme.row, customTheme);
  return (0, import_jsx_runtime78.jsx)("tr", { "data-testid": "table-row-element", className: twMerge(theme2.base, striped && theme2.striped, hoverable && theme2.hovered, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Table/Table.js
var TableComponent = ({ children, className, striped, hoverable, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().table, customTheme);
  return (0, import_jsx_runtime79.jsx)("div", { "data-testid": "table-element", className: twMerge(theme2.root.wrapper), children: (0, import_jsx_runtime79.jsxs)(TableContext.Provider, { value: { theme: theme2, striped, hoverable }, children: [(0, import_jsx_runtime79.jsx)("div", { className: twMerge(theme2.root.shadow, className) }), (0, import_jsx_runtime79.jsx)("table", { className: twMerge(theme2.root.base, className), ...props, children })] }) });
};
TableComponent.displayName = "Table";
TableHead.displayName = "Table.Head";
TableBody.displayName = "Table.Body";
TableRow.displayName = "Table.Row";
TableCell.displayName = "Table.Cell";
TableHeadCell.displayName = "Table.HeadCell";
var Table = Object.assign(TableComponent, {
  Head: TableHead,
  Body: TableBody,
  Row: TableRow,
  Cell: TableCell,
  HeadCell: TableHeadCell
});

// node_modules/flowbite-react/lib/esm/components/Tabs/TabItem.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var TabItem = ({ children, className }) => (0, import_jsx_runtime80.jsx)("div", { className, children });
TabItem.displayName = "Tabs.Item";

// node_modules/flowbite-react/lib/esm/components/Tabs/Tabs.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var import_react42 = __toESM(require_react());
var TabsComponent = (0, import_react42.forwardRef)(({ children, className, onActiveTabChange, style = "default", theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().tabs, customTheme);
  const id = (0, import_react42.useId)();
  const tabs = (0, import_react42.useMemo)(() => import_react42.Children.map(import_react42.Children.toArray(children), ({ props: props2 }) => props2), [children]);
  const tabRefs = (0, import_react42.useRef)([]);
  const [activeTab, setActiveTab] = (0, import_react42.useState)(Math.max(0, tabs.findIndex((tab) => tab.active)));
  const [focusedTab, setFocusedTab] = (0, import_react42.useState)(-1);
  const setActiveTabWithCallback = (activeTab2) => {
    setActiveTab(activeTab2);
    if (onActiveTabChange)
      onActiveTabChange(activeTab2);
  };
  const handleClick = ({ target }) => {
    setActiveTabWithCallback(target);
    setFocusedTab(target);
  };
  const handleKeyboard = ({ event, target }) => {
    if (event.key === "ArrowLeft") {
      setFocusedTab(Math.max(0, focusedTab - 1));
    }
    if (event.key === "ArrowRight") {
      setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));
    }
    if (event.key === "Enter") {
      setActiveTabWithCallback(target);
      setFocusedTab(target);
    }
  };
  const tabItemStyle = theme2.tablist.tabitem.styles[style];
  const tabItemContainerStyle = theme2.tabitemcontainer.styles[style];
  (0, import_react42.useEffect)(() => {
    var _a;
    (_a = tabRefs.current[focusedTab]) == null ? void 0 : _a.focus();
  }, [focusedTab]);
  (0, import_react42.useImperativeHandle)(ref, () => ({
    setActiveTab: setActiveTabWithCallback
  }));
  return (0, import_jsx_runtime81.jsxs)("div", { className: twMerge(theme2.base, className), children: [(0, import_jsx_runtime81.jsx)("div", { "aria-label": "Tabs", role: "tablist", className: twMerge(theme2.tablist.base, theme2.tablist.styles[style], className), ...props, children: tabs.map((tab, index) => (0, import_jsx_runtime81.jsxs)("button", { type: "button", "aria-controls": `${id}-tabpanel-${index}`, "aria-selected": index === activeTab, className: twMerge(theme2.tablist.tabitem.base, tabItemStyle.base, index === activeTab && tabItemStyle.active.on, index !== activeTab && !tab.disabled && tabItemStyle.active.off), disabled: tab.disabled, id: `${id}-tab-${index}`, onClick: () => handleClick({ target: index }), onKeyDown: (event) => handleKeyboard({ event, target: index }), ref: (element) => tabRefs.current[index] = element, role: "tab", tabIndex: index === focusedTab ? 0 : -1, style: { zIndex: index === focusedTab ? 2 : 1 }, children: [tab.icon && (0, import_jsx_runtime81.jsx)(tab.icon, { className: theme2.tablist.tabitem.icon }), tab.title] }, index)) }), (0, import_jsx_runtime81.jsx)("div", { className: twMerge(theme2.tabitemcontainer.base, tabItemContainerStyle), children: tabs.map((tab, index) => (0, import_jsx_runtime81.jsx)("div", { "aria-labelledby": `${id}-tab-${index}`, className: theme2.tabpanel, hidden: index !== activeTab, id: `${id}-tabpanel-${index}`, role: "tabpanel", tabIndex: 0, children: tab.children }, index)) })] });
});
TabsComponent.displayName = "Tabs";
var Tabs = Object.assign(TabsComponent, {
  Item: TabItem
});

// node_modules/flowbite-react/lib/esm/components/Textarea/Textarea.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var import_react43 = __toESM(require_react());
var Textarea = (0, import_react43.forwardRef)(({ className, color = "gray", helperText, shadow, theme: customTheme = {}, ...props }, ref) => {
  const theme2 = mergeDeep(getTheme().textarea, customTheme);
  return (0, import_jsx_runtime82.jsxs)(import_jsx_runtime82.Fragment, { children: [(0, import_jsx_runtime82.jsx)("textarea", { ref, className: twMerge(theme2.base, theme2.colors[color], theme2.withShadow[shadow ? "on" : "off"], className), ...props }), helperText && (0, import_jsx_runtime82.jsx)(HelperText, { color, children: helperText })] });
});
Textarea.displayName = "Textarea";

// node_modules/flowbite-react/lib/esm/components/ThemeModeScript/ThemeModeScript.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var ThemeModeScript = ({ mode, ...others }) => {
  return (0, import_jsx_runtime83.jsx)("script", { ...others, "data-flowbite-theme-mode-script": true, dangerouslySetInnerHTML: {
    __html: getScript({ mode, defaultMode: "light", localStorageKey: "flowbite-theme-mode" })
  } });
};
function getScript({ mode, defaultMode, localStorageKey }) {
  return `
    try {
      const mode = window.localStorage.getItem('${localStorageKey}') ?? '${mode}' ?? '${defaultMode}';
      const computedMode =
        mode === 'auto' ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light') : mode;

      if (computedMode === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } catch (e) {}
  `;
}

// node_modules/flowbite-react/lib/esm/components/Timeline/Timeline.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineBody.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineContentContext.js
var import_react44 = __toESM(require_react());
var TimelineContentContext = (0, import_react44.createContext)(void 0);
function useTimelineContentContext() {
  const context = (0, import_react44.useContext)(TimelineContentContext);
  if (!context) {
    throw new Error("useTimelineContentContext should be used within the TimelineContentContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineBody.js
var TimelineBody = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme2 = mergeDeep(contentTheme.body, customTheme);
  return (0, import_jsx_runtime84.jsx)("div", { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineContent.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineContext.js
var import_react45 = __toESM(require_react());
var TimelineContext = (0, import_react45.createContext)(void 0);
function useTimelineContext() {
  const context = (0, import_react45.useContext)(TimelineContext);
  if (!context) {
    throw new Error("useTimelineContext should be used within the TimelineContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineItemContext.js
var import_react46 = __toESM(require_react());
var TimelineItemContext = (0, import_react46.createContext)(void 0);
function useTimelineItemContext() {
  const context = (0, import_react46.useContext)(TimelineItemContext);
  if (!context) {
    throw new Error("useTimelineItemContext should be used within the TimelineItemContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineContent.js
var TimelineContent = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { horizontal } = useTimelineContext();
  const { theme: itemTheme } = useTimelineItemContext();
  const theme2 = mergeDeep(itemTheme.content, customTheme);
  return (0, import_jsx_runtime85.jsx)(TimelineContentContext.Provider, { value: { theme: theme2 }, children: (0, import_jsx_runtime85.jsx)("div", { "data-testid": "timeline-content", className: twMerge(horizontal && theme2.root.base, className), ...props, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineItem.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var TimelineItem = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: rootTheme, horizontal } = useTimelineContext();
  const theme2 = mergeDeep(rootTheme.item, customTheme);
  return (0, import_jsx_runtime86.jsx)(TimelineItemContext.Provider, { value: { theme: theme2 }, children: (0, import_jsx_runtime86.jsx)("li", { "data-testid": "timeline-item", className: twMerge(horizontal && theme2.root.horizontal, !horizontal && theme2.root.vertical, className), ...props, children }) });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelinePoint.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var TimelinePoint = ({ children, className, icon: Icon, theme: customTheme = {}, ...props }) => {
  const { horizontal } = useTimelineContext();
  const { theme: itemTheme } = useTimelineItemContext();
  const theme2 = mergeDeep(itemTheme.point, customTheme);
  return (0, import_jsx_runtime87.jsxs)("div", { "data-testid": "timeline-point", className: twMerge(horizontal && theme2.horizontal, !horizontal && theme2.vertical, className), ...props, children: [children, Icon ? (0, import_jsx_runtime87.jsx)("span", { className: twMerge(theme2.marker.icon.wrapper), children: (0, import_jsx_runtime87.jsx)(Icon, { "aria-hidden": true, className: twMerge(theme2.marker.icon.base) }) }) : (0, import_jsx_runtime87.jsx)("div", { className: twMerge(horizontal && theme2.marker.base.horizontal, !horizontal && theme2.marker.base.vertical) }), horizontal && (0, import_jsx_runtime87.jsx)("div", { className: twMerge(theme2.line) })] });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineTime.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var TimelineTime = ({ children, className, theme: customTheme = {}, ...props }) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme2 = mergeDeep(contentTheme.time, customTheme);
  return (0, import_jsx_runtime88.jsx)("time", { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/TimelineTitle.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var TimelineTitle = ({ as: Tag = "h3", children, className, theme: customTheme = {}, ...props }) => {
  const { theme: contentTheme } = useTimelineContentContext();
  const theme2 = mergeDeep(contentTheme.title, customTheme);
  return (0, import_jsx_runtime89.jsx)(Tag, { className: twMerge(theme2.base, className), ...props, children });
};

// node_modules/flowbite-react/lib/esm/components/Timeline/Timeline.js
var TimelineComponent = ({ children, className, horizontal, theme: customTheme = {}, ...props }) => {
  const theme2 = mergeDeep(getTheme().timeline, customTheme);
  return (0, import_jsx_runtime90.jsx)(TimelineContext.Provider, { value: { theme: theme2, horizontal }, children: (0, import_jsx_runtime90.jsx)("ol", { "data-testid": "timeline-component", className: twMerge(horizontal && theme2.root.direction.horizontal, !horizontal && theme2.root.direction.vertical, className), ...props, children }) });
};
TimelineComponent.displayName = "Timeline";
TimelineItem.displayName = "Timeline.Item";
TimelinePoint.displayName = "Timeline.Point";
TimelineContent.displayName = "Timeline.Content";
TimelineTime.displayName = "Timeline.Time";
TimelineTitle.displayName = "Timeline.Title";
TimelineBody.displayName = "Timeline.Body";
var Timeline = Object.assign(TimelineComponent, {
  Item: TimelineItem,
  Point: TimelinePoint,
  Content: TimelineContent,
  Time: TimelineTime,
  Title: TimelineTitle,
  Body: TimelineBody
});

// node_modules/flowbite-react/lib/esm/components/Toast/Toast.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
var import_react48 = __toESM(require_react());

// node_modules/flowbite-react/lib/esm/components/Toast/ToastContext.js
var import_react47 = __toESM(require_react());
var ToastContext = (0, import_react47.createContext)(void 0);
function useToastContext() {
  const context = (0, import_react47.useContext)(ToastContext);
  if (!context) {
    throw new Error("useToastContext should be used within the ToastContext provider!");
  }
  return context;
}

// node_modules/flowbite-react/lib/esm/components/Toast/ToastToggle.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var ToastToggle = ({ className, onClick, theme: customTheme = {}, xIcon: XIcon = HiX, onDismiss, ...props }) => {
  const { theme: rootTheme, duration, isClosed, isRemoved, setIsClosed, setIsRemoved } = useToastContext();
  const theme2 = mergeDeep(rootTheme.toggle, customTheme);
  const handleClick = (e2) => {
    if (onClick)
      onClick(e2);
    if (onDismiss) {
      onDismiss();
      return;
    }
    setIsClosed(!isClosed);
    setTimeout(() => setIsRemoved(!isRemoved), duration);
  };
  return (0, import_jsx_runtime91.jsx)("button", { "aria-label": "Close", onClick: handleClick, type: "button", className: twMerge(theme2.base, className), ...props, children: (0, import_jsx_runtime91.jsx)(XIcon, { "aria-hidden": true, className: theme2.icon }) });
};

// node_modules/flowbite-react/lib/esm/components/Toast/Toast.js
var durationClasses = {
  75: "duration-75",
  100: "duration-100",
  150: "duration-150",
  200: "duration-200",
  300: "duration-300",
  500: "duration-500",
  700: "duration-700",
  1e3: "duration-1000"
};
var ToastComponent = ({ children, className, duration = 300, theme: customTheme = {}, ...props }) => {
  const [isClosed, setIsClosed] = (0, import_react48.useState)(false);
  const [isRemoved, setIsRemoved] = (0, import_react48.useState)(false);
  const theme2 = mergeDeep(getTheme().toast, customTheme);
  if (isRemoved) {
    return null;
  }
  return (0, import_jsx_runtime92.jsx)(ToastContext.Provider, { value: { theme: theme2, duration, isClosed, isRemoved, setIsClosed, setIsRemoved }, children: (0, import_jsx_runtime92.jsx)("div", { "data-testid": "flowbite-toast", role: "alert", className: twMerge(theme2.root.base, durationClasses[duration], isClosed && theme2.root.closed, className), ...props, children }) });
};
ToastComponent.displayName = "Toast";
ToastToggle.displayName = "Toast.Toggle";
var Toast = Object.assign(ToastComponent, {
  Toggle: ToastToggle
});

// node_modules/flowbite-react/lib/esm/components/ToggleSwitch/ToggleSwitch.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var import_react49 = __toESM(require_react());
var ToggleSwitch = ({ checked, className, color = "blue", sizing = "md", disabled, label, name, onChange, theme: customTheme = {}, ...props }) => {
  const id = (0, import_react49.useId)();
  const theme2 = mergeDeep(getTheme().toggleSwitch, customTheme);
  const toggle = () => onChange(!checked);
  const handleClick = () => {
    toggle();
  };
  const handleOnKeyDown = (event) => {
    if (event.code == "Enter") {
      event.preventDefault();
    }
  };
  return (0, import_jsx_runtime93.jsxs)(import_jsx_runtime93.Fragment, { children: [name && checked ? (0, import_jsx_runtime93.jsx)("input", { checked, hidden: true, name, readOnly: true, type: "checkbox", className: "sr-only" }) : null, (0, import_jsx_runtime93.jsxs)("button", { "aria-checked": checked, "aria-labelledby": `${id}-flowbite-toggleswitch-label`, disabled, id: `${id}-flowbite-toggleswitch`, onClick: handleClick, onKeyDown: handleOnKeyDown, role: "switch", tabIndex: 0, type: "button", className: twMerge(theme2.root.base, theme2.root.active[disabled ? "off" : "on"], className), ...props, children: [(0, import_jsx_runtime93.jsx)("div", { "data-testid": "flowbite-toggleswitch-toggle", className: twMerge(theme2.toggle.base, theme2.toggle.checked[checked ? "on" : "off"], checked && theme2.toggle.checked.color[color], theme2.toggle.sizes[sizing]) }), (label == null ? void 0 : label.length) ? (0, import_jsx_runtime93.jsx)("span", { "data-testid": "flowbite-toggleswitch-label", id: `${id}-flowbite-toggleswitch-label`, className: theme2.root.label, children: label }) : null] })] });
};
ToggleSwitch.displayName = "ToggleSwitch";
export {
  Accordion,
  AccordionContent,
  AccordionPanel,
  AccordionTitle,
  Alert,
  Avatar,
  AvatarGroup,
  AvatarGroupCounter,
  Badge,
  Banner,
  BannerCollapseButton,
  Blockquote,
  Breadcrumb,
  BreadcrumbItem,
  Button,
  ButtonGroup,
  Card,
  Carousel,
  Checkbox,
  DarkThemeToggle,
  Datepicker,
  Dropdown,
  DropdownDivider,
  DropdownHeader,
  DropdownItem,
  FileInput,
  FloatingLabel,
  Flowbite,
  Footer,
  FooterBrand,
  FooterCopyright,
  FooterDivider,
  FooterIcon,
  FooterLink,
  FooterLinkGroup,
  FooterTitle,
  HelperText,
  Kbd,
  Label,
  List,
  ListGroup,
  ListGroupItem,
  ListItem,
  Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
  Navbar,
  NavbarBrand,
  NavbarCollapse,
  NavbarLink,
  NavbarToggle,
  Pagination,
  PaginationButton,
  Progress,
  Radio,
  RangeSlider,
  Rating,
  RatingAdvanced,
  RatingStar,
  Select,
  Sidebar,
  SidebarCTA,
  SidebarCollapse,
  SidebarItem,
  SidebarItemGroup,
  SidebarItems,
  SidebarLogo,
  Spinner,
  TabItem,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeadCell,
  TableRow,
  Tabs,
  TextInput,
  Textarea,
  ThemeModeScript,
  Timeline,
  TimelineBody,
  TimelineContent,
  TimelineItem,
  TimelinePoint,
  TimelineTime,
  TimelineTitle,
  Toast,
  ToastToggle,
  ToggleSwitch,
  Tooltip,
  WeekStart,
  getTheme,
  getThemeMode,
  theme,
  useThemeMode
};
/*! Bundled license information:

react-indiana-drag-scroll/dist/index.es.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
  (*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=flowbite-react.js.map
